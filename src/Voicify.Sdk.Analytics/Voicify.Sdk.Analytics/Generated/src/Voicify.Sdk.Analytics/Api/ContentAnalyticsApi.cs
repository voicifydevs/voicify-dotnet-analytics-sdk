/* 
 * Voicify Analytics API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Voicify.Sdk.Analytics.Client;
using Voicify.Sdk.Core.Models.Model;

namespace Voicify.Sdk.Analytics.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContentAnalyticsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets the request data histogram for the given content item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>List&lt;DatedUsageModel&gt;</returns>
        List<DatedUsageModel> GetApplicationHistogram (string applicationId, string contentId, string interval = null, DateTime? startDate = null, DateTime? endDate = null);

        /// <summary>
        /// Gets the request data histogram for the given content item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApiResponse of List&lt;DatedUsageModel&gt;</returns>
        ApiResponse<List<DatedUsageModel>> GetApplicationHistogramWithHttpInfo (string applicationId, string contentId, string interval = null, DateTime? startDate = null, DateTime? endDate = null);
        /// <summary>
        /// Gets the session request data for the given content item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ContentUsageModel</returns>
        ContentUsageModel GetApplicationSessions (string applicationId, string contentId, DateTime? startDate = null, DateTime? endDate = null);

        /// <summary>
        /// Gets the session request data for the given content item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApiResponse of ContentUsageModel</returns>
        ApiResponse<ContentUsageModel> GetApplicationSessionsWithHttpInfo (string applicationId, string contentId, DateTime? startDate = null, DateTime? endDate = null);
        /// <summary>
        /// Gets the session data histogram for the given content item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>List&lt;DatedUsageModel&gt;</returns>
        List<DatedUsageModel> GetApplicationSessionssHistogram (string applicationId, string contentId, string interval = null, DateTime? startDate = null, DateTime? endDate = null);

        /// <summary>
        /// Gets the session data histogram for the given content item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApiResponse of List&lt;DatedUsageModel&gt;</returns>
        ApiResponse<List<DatedUsageModel>> GetApplicationSessionssHistogramWithHttpInfo (string applicationId, string contentId, string interval = null, DateTime? startDate = null, DateTime? endDate = null);
        /// <summary>
        /// Gets the request data for the given content item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ContentUsageModel</returns>
        ContentUsageModel GetApplicationUsage (string applicationId, string contentId, DateTime? startDate = null, DateTime? endDate = null);

        /// <summary>
        /// Gets the request data for the given content item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApiResponse of ContentUsageModel</returns>
        ApiResponse<ContentUsageModel> GetApplicationUsageWithHttpInfo (string applicationId, string contentId, DateTime? startDate = null, DateTime? endDate = null);
        /// <summary>
        /// Gets the user request data for the given content item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ContentUsageModel</returns>
        ContentUsageModel GetApplicationUsers (string applicationId, string contentId, DateTime? startDate = null, DateTime? endDate = null);

        /// <summary>
        /// Gets the user request data for the given content item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApiResponse of ContentUsageModel</returns>
        ApiResponse<ContentUsageModel> GetApplicationUsersWithHttpInfo (string applicationId, string contentId, DateTime? startDate = null, DateTime? endDate = null);
        /// <summary>
        /// Gets the users data histogram for the given content item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>List&lt;DatedUsageModel&gt;</returns>
        List<DatedUsageModel> GetApplicationUsersHistogram (string applicationId, string contentId, string interval = null, DateTime? startDate = null, DateTime? endDate = null);

        /// <summary>
        /// Gets the users data histogram for the given content item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApiResponse of List&lt;DatedUsageModel&gt;</returns>
        ApiResponse<List<DatedUsageModel>> GetApplicationUsersHistogramWithHttpInfo (string applicationId, string contentId, string interval = null, DateTime? startDate = null, DateTime? endDate = null);
        /// <summary>
        /// Gets the basic stats for the given piece of content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApplicationStatisticsModel</returns>
        ApplicationStatisticsModel GetBasicApplicationStats (string applicationId, string contentId, DateTime? startDate = null, DateTime? endDate = null);

        /// <summary>
        /// Gets the basic stats for the given piece of content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApiResponse of ApplicationStatisticsModel</returns>
        ApiResponse<ApplicationStatisticsModel> GetBasicApplicationStatsWithHttpInfo (string applicationId, string contentId, DateTime? startDate = null, DateTime? endDate = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets the request data histogram for the given content item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of List&lt;DatedUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<DatedUsageModel>> GetApplicationHistogramAsync (string applicationId, string contentId, string interval = null, DateTime? startDate = null, DateTime? endDate = null);

        /// <summary>
        /// Gets the request data histogram for the given content item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DatedUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DatedUsageModel>>> GetApplicationHistogramAsyncWithHttpInfo (string applicationId, string contentId, string interval = null, DateTime? startDate = null, DateTime? endDate = null);
        /// <summary>
        /// Gets the session request data for the given content item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ContentUsageModel</returns>
        System.Threading.Tasks.Task<ContentUsageModel> GetApplicationSessionsAsync (string applicationId, string contentId, DateTime? startDate = null, DateTime? endDate = null);

        /// <summary>
        /// Gets the session request data for the given content item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApiResponse (ContentUsageModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContentUsageModel>> GetApplicationSessionsAsyncWithHttpInfo (string applicationId, string contentId, DateTime? startDate = null, DateTime? endDate = null);
        /// <summary>
        /// Gets the session data histogram for the given content item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of List&lt;DatedUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<DatedUsageModel>> GetApplicationSessionssHistogramAsync (string applicationId, string contentId, string interval = null, DateTime? startDate = null, DateTime? endDate = null);

        /// <summary>
        /// Gets the session data histogram for the given content item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DatedUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DatedUsageModel>>> GetApplicationSessionssHistogramAsyncWithHttpInfo (string applicationId, string contentId, string interval = null, DateTime? startDate = null, DateTime? endDate = null);
        /// <summary>
        /// Gets the request data for the given content item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ContentUsageModel</returns>
        System.Threading.Tasks.Task<ContentUsageModel> GetApplicationUsageAsync (string applicationId, string contentId, DateTime? startDate = null, DateTime? endDate = null);

        /// <summary>
        /// Gets the request data for the given content item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApiResponse (ContentUsageModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContentUsageModel>> GetApplicationUsageAsyncWithHttpInfo (string applicationId, string contentId, DateTime? startDate = null, DateTime? endDate = null);
        /// <summary>
        /// Gets the user request data for the given content item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ContentUsageModel</returns>
        System.Threading.Tasks.Task<ContentUsageModel> GetApplicationUsersAsync (string applicationId, string contentId, DateTime? startDate = null, DateTime? endDate = null);

        /// <summary>
        /// Gets the user request data for the given content item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApiResponse (ContentUsageModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContentUsageModel>> GetApplicationUsersAsyncWithHttpInfo (string applicationId, string contentId, DateTime? startDate = null, DateTime? endDate = null);
        /// <summary>
        /// Gets the users data histogram for the given content item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of List&lt;DatedUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<DatedUsageModel>> GetApplicationUsersHistogramAsync (string applicationId, string contentId, string interval = null, DateTime? startDate = null, DateTime? endDate = null);

        /// <summary>
        /// Gets the users data histogram for the given content item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DatedUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DatedUsageModel>>> GetApplicationUsersHistogramAsyncWithHttpInfo (string applicationId, string contentId, string interval = null, DateTime? startDate = null, DateTime? endDate = null);
        /// <summary>
        /// Gets the basic stats for the given piece of content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApplicationStatisticsModel</returns>
        System.Threading.Tasks.Task<ApplicationStatisticsModel> GetBasicApplicationStatsAsync (string applicationId, string contentId, DateTime? startDate = null, DateTime? endDate = null);

        /// <summary>
        /// Gets the basic stats for the given piece of content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApiResponse (ApplicationStatisticsModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationStatisticsModel>> GetBasicApplicationStatsAsyncWithHttpInfo (string applicationId, string contentId, DateTime? startDate = null, DateTime? endDate = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ContentAnalyticsApi : IContentAnalyticsApi
    {
        private Voicify.Sdk.Analytics.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ContentAnalyticsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContentAnalyticsApi(String basePath)
        {
            this.Configuration = new Voicify.Sdk.Analytics.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Voicify.Sdk.Analytics.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContentAnalyticsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ContentAnalyticsApi(Voicify.Sdk.Analytics.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Voicify.Sdk.Analytics.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Voicify.Sdk.Analytics.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Voicify.Sdk.Analytics.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Voicify.Sdk.Analytics.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets the request data histogram for the given content item 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>List&lt;DatedUsageModel&gt;</returns>
        public List<DatedUsageModel> GetApplicationHistogram (string applicationId, string contentId, string interval = null, DateTime? startDate = null, DateTime? endDate = null)
        {
             ApiResponse<List<DatedUsageModel>> localVarResponse = GetApplicationHistogramWithHttpInfo(applicationId, contentId, interval, startDate, endDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the request data histogram for the given content item 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApiResponse of List&lt;DatedUsageModel&gt;</returns>
        public ApiResponse< List<DatedUsageModel> > GetApplicationHistogramWithHttpInfo (string applicationId, string contentId, string interval = null, DateTime? startDate = null, DateTime? endDate = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentAnalyticsApi->GetApplicationHistogram");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentAnalyticsApi->GetApplicationHistogram");

            var localVarPath = "/api/ContentAnalytics/requests/histogram/{applicationId}/{contentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationHistogram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DatedUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DatedUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DatedUsageModel>)));
        }

        /// <summary>
        /// Gets the request data histogram for the given content item 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of List&lt;DatedUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<DatedUsageModel>> GetApplicationHistogramAsync (string applicationId, string contentId, string interval = null, DateTime? startDate = null, DateTime? endDate = null)
        {
             ApiResponse<List<DatedUsageModel>> localVarResponse = await GetApplicationHistogramAsyncWithHttpInfo(applicationId, contentId, interval, startDate, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the request data histogram for the given content item 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DatedUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DatedUsageModel>>> GetApplicationHistogramAsyncWithHttpInfo (string applicationId, string contentId, string interval = null, DateTime? startDate = null, DateTime? endDate = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentAnalyticsApi->GetApplicationHistogram");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentAnalyticsApi->GetApplicationHistogram");

            var localVarPath = "/api/ContentAnalytics/requests/histogram/{applicationId}/{contentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationHistogram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DatedUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DatedUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DatedUsageModel>)));
        }

        /// <summary>
        /// Gets the session request data for the given content item 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ContentUsageModel</returns>
        public ContentUsageModel GetApplicationSessions (string applicationId, string contentId, DateTime? startDate = null, DateTime? endDate = null)
        {
             ApiResponse<ContentUsageModel> localVarResponse = GetApplicationSessionsWithHttpInfo(applicationId, contentId, startDate, endDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the session request data for the given content item 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApiResponse of ContentUsageModel</returns>
        public ApiResponse< ContentUsageModel > GetApplicationSessionsWithHttpInfo (string applicationId, string contentId, DateTime? startDate = null, DateTime? endDate = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentAnalyticsApi->GetApplicationSessions");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentAnalyticsApi->GetApplicationSessions");

            var localVarPath = "/api/ContentAnalytics/sessions/usage/{applicationId}/{contentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationSessions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContentUsageModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContentUsageModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContentUsageModel)));
        }

        /// <summary>
        /// Gets the session request data for the given content item 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ContentUsageModel</returns>
        public async System.Threading.Tasks.Task<ContentUsageModel> GetApplicationSessionsAsync (string applicationId, string contentId, DateTime? startDate = null, DateTime? endDate = null)
        {
             ApiResponse<ContentUsageModel> localVarResponse = await GetApplicationSessionsAsyncWithHttpInfo(applicationId, contentId, startDate, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the session request data for the given content item 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApiResponse (ContentUsageModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContentUsageModel>> GetApplicationSessionsAsyncWithHttpInfo (string applicationId, string contentId, DateTime? startDate = null, DateTime? endDate = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentAnalyticsApi->GetApplicationSessions");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentAnalyticsApi->GetApplicationSessions");

            var localVarPath = "/api/ContentAnalytics/sessions/usage/{applicationId}/{contentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationSessions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContentUsageModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContentUsageModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContentUsageModel)));
        }

        /// <summary>
        /// Gets the session data histogram for the given content item 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>List&lt;DatedUsageModel&gt;</returns>
        public List<DatedUsageModel> GetApplicationSessionssHistogram (string applicationId, string contentId, string interval = null, DateTime? startDate = null, DateTime? endDate = null)
        {
             ApiResponse<List<DatedUsageModel>> localVarResponse = GetApplicationSessionssHistogramWithHttpInfo(applicationId, contentId, interval, startDate, endDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the session data histogram for the given content item 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApiResponse of List&lt;DatedUsageModel&gt;</returns>
        public ApiResponse< List<DatedUsageModel> > GetApplicationSessionssHistogramWithHttpInfo (string applicationId, string contentId, string interval = null, DateTime? startDate = null, DateTime? endDate = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentAnalyticsApi->GetApplicationSessionssHistogram");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentAnalyticsApi->GetApplicationSessionssHistogram");

            var localVarPath = "/api/ContentAnalytics/sessions/histogram/{applicationId}/{contentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationSessionssHistogram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DatedUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DatedUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DatedUsageModel>)));
        }

        /// <summary>
        /// Gets the session data histogram for the given content item 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of List&lt;DatedUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<DatedUsageModel>> GetApplicationSessionssHistogramAsync (string applicationId, string contentId, string interval = null, DateTime? startDate = null, DateTime? endDate = null)
        {
             ApiResponse<List<DatedUsageModel>> localVarResponse = await GetApplicationSessionssHistogramAsyncWithHttpInfo(applicationId, contentId, interval, startDate, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the session data histogram for the given content item 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DatedUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DatedUsageModel>>> GetApplicationSessionssHistogramAsyncWithHttpInfo (string applicationId, string contentId, string interval = null, DateTime? startDate = null, DateTime? endDate = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentAnalyticsApi->GetApplicationSessionssHistogram");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentAnalyticsApi->GetApplicationSessionssHistogram");

            var localVarPath = "/api/ContentAnalytics/sessions/histogram/{applicationId}/{contentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationSessionssHistogram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DatedUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DatedUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DatedUsageModel>)));
        }

        /// <summary>
        /// Gets the request data for the given content item 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ContentUsageModel</returns>
        public ContentUsageModel GetApplicationUsage (string applicationId, string contentId, DateTime? startDate = null, DateTime? endDate = null)
        {
             ApiResponse<ContentUsageModel> localVarResponse = GetApplicationUsageWithHttpInfo(applicationId, contentId, startDate, endDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the request data for the given content item 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApiResponse of ContentUsageModel</returns>
        public ApiResponse< ContentUsageModel > GetApplicationUsageWithHttpInfo (string applicationId, string contentId, DateTime? startDate = null, DateTime? endDate = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentAnalyticsApi->GetApplicationUsage");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentAnalyticsApi->GetApplicationUsage");

            var localVarPath = "/api/ContentAnalytics/requests/usage/{applicationId}/{contentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationUsage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContentUsageModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContentUsageModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContentUsageModel)));
        }

        /// <summary>
        /// Gets the request data for the given content item 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ContentUsageModel</returns>
        public async System.Threading.Tasks.Task<ContentUsageModel> GetApplicationUsageAsync (string applicationId, string contentId, DateTime? startDate = null, DateTime? endDate = null)
        {
             ApiResponse<ContentUsageModel> localVarResponse = await GetApplicationUsageAsyncWithHttpInfo(applicationId, contentId, startDate, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the request data for the given content item 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApiResponse (ContentUsageModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContentUsageModel>> GetApplicationUsageAsyncWithHttpInfo (string applicationId, string contentId, DateTime? startDate = null, DateTime? endDate = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentAnalyticsApi->GetApplicationUsage");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentAnalyticsApi->GetApplicationUsage");

            var localVarPath = "/api/ContentAnalytics/requests/usage/{applicationId}/{contentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationUsage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContentUsageModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContentUsageModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContentUsageModel)));
        }

        /// <summary>
        /// Gets the user request data for the given content item 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ContentUsageModel</returns>
        public ContentUsageModel GetApplicationUsers (string applicationId, string contentId, DateTime? startDate = null, DateTime? endDate = null)
        {
             ApiResponse<ContentUsageModel> localVarResponse = GetApplicationUsersWithHttpInfo(applicationId, contentId, startDate, endDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the user request data for the given content item 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApiResponse of ContentUsageModel</returns>
        public ApiResponse< ContentUsageModel > GetApplicationUsersWithHttpInfo (string applicationId, string contentId, DateTime? startDate = null, DateTime? endDate = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentAnalyticsApi->GetApplicationUsers");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentAnalyticsApi->GetApplicationUsers");

            var localVarPath = "/api/ContentAnalytics/users/usage/{applicationId}/{contentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContentUsageModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContentUsageModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContentUsageModel)));
        }

        /// <summary>
        /// Gets the user request data for the given content item 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ContentUsageModel</returns>
        public async System.Threading.Tasks.Task<ContentUsageModel> GetApplicationUsersAsync (string applicationId, string contentId, DateTime? startDate = null, DateTime? endDate = null)
        {
             ApiResponse<ContentUsageModel> localVarResponse = await GetApplicationUsersAsyncWithHttpInfo(applicationId, contentId, startDate, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the user request data for the given content item 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApiResponse (ContentUsageModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContentUsageModel>> GetApplicationUsersAsyncWithHttpInfo (string applicationId, string contentId, DateTime? startDate = null, DateTime? endDate = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentAnalyticsApi->GetApplicationUsers");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentAnalyticsApi->GetApplicationUsers");

            var localVarPath = "/api/ContentAnalytics/users/usage/{applicationId}/{contentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContentUsageModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContentUsageModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContentUsageModel)));
        }

        /// <summary>
        /// Gets the users data histogram for the given content item 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>List&lt;DatedUsageModel&gt;</returns>
        public List<DatedUsageModel> GetApplicationUsersHistogram (string applicationId, string contentId, string interval = null, DateTime? startDate = null, DateTime? endDate = null)
        {
             ApiResponse<List<DatedUsageModel>> localVarResponse = GetApplicationUsersHistogramWithHttpInfo(applicationId, contentId, interval, startDate, endDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the users data histogram for the given content item 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApiResponse of List&lt;DatedUsageModel&gt;</returns>
        public ApiResponse< List<DatedUsageModel> > GetApplicationUsersHistogramWithHttpInfo (string applicationId, string contentId, string interval = null, DateTime? startDate = null, DateTime? endDate = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentAnalyticsApi->GetApplicationUsersHistogram");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentAnalyticsApi->GetApplicationUsersHistogram");

            var localVarPath = "/api/ContentAnalytics/users/histogram/{applicationId}/{contentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationUsersHistogram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DatedUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DatedUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DatedUsageModel>)));
        }

        /// <summary>
        /// Gets the users data histogram for the given content item 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of List&lt;DatedUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<DatedUsageModel>> GetApplicationUsersHistogramAsync (string applicationId, string contentId, string interval = null, DateTime? startDate = null, DateTime? endDate = null)
        {
             ApiResponse<List<DatedUsageModel>> localVarResponse = await GetApplicationUsersHistogramAsyncWithHttpInfo(applicationId, contentId, interval, startDate, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the users data histogram for the given content item 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DatedUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DatedUsageModel>>> GetApplicationUsersHistogramAsyncWithHttpInfo (string applicationId, string contentId, string interval = null, DateTime? startDate = null, DateTime? endDate = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentAnalyticsApi->GetApplicationUsersHistogram");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentAnalyticsApi->GetApplicationUsersHistogram");

            var localVarPath = "/api/ContentAnalytics/users/histogram/{applicationId}/{contentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationUsersHistogram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DatedUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DatedUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DatedUsageModel>)));
        }

        /// <summary>
        /// Gets the basic stats for the given piece of content 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApplicationStatisticsModel</returns>
        public ApplicationStatisticsModel GetBasicApplicationStats (string applicationId, string contentId, DateTime? startDate = null, DateTime? endDate = null)
        {
             ApiResponse<ApplicationStatisticsModel> localVarResponse = GetBasicApplicationStatsWithHttpInfo(applicationId, contentId, startDate, endDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the basic stats for the given piece of content 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApiResponse of ApplicationStatisticsModel</returns>
        public ApiResponse< ApplicationStatisticsModel > GetBasicApplicationStatsWithHttpInfo (string applicationId, string contentId, DateTime? startDate = null, DateTime? endDate = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentAnalyticsApi->GetBasicApplicationStats");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentAnalyticsApi->GetBasicApplicationStats");

            var localVarPath = "/api/ContentAnalytics/stats/{applicationId}/{contentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBasicApplicationStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationStatisticsModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationStatisticsModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationStatisticsModel)));
        }

        /// <summary>
        /// Gets the basic stats for the given piece of content 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApplicationStatisticsModel</returns>
        public async System.Threading.Tasks.Task<ApplicationStatisticsModel> GetBasicApplicationStatsAsync (string applicationId, string contentId, DateTime? startDate = null, DateTime? endDate = null)
        {
             ApiResponse<ApplicationStatisticsModel> localVarResponse = await GetBasicApplicationStatsAsyncWithHttpInfo(applicationId, contentId, startDate, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the basic stats for the given piece of content 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApiResponse (ApplicationStatisticsModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApplicationStatisticsModel>> GetBasicApplicationStatsAsyncWithHttpInfo (string applicationId, string contentId, DateTime? startDate = null, DateTime? endDate = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentAnalyticsApi->GetBasicApplicationStats");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentAnalyticsApi->GetBasicApplicationStats");

            var localVarPath = "/api/ContentAnalytics/stats/{applicationId}/{contentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBasicApplicationStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationStatisticsModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationStatisticsModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationStatisticsModel)));
        }

    }
}

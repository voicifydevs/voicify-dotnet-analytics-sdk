/* 
 * Voicify Analytics API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Voicify.Sdk.Analytics.Client;
using Voicify.Sdk.Core.Models.Model;

namespace Voicify.Sdk.Analytics.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContentApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets the total usage counts for the given content item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApplicationStatisticsModel</returns>
        ApplicationStatisticsModel GetApplicationUsageTotals (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Gets the total usage counts for the given content item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of ApplicationStatisticsModel</returns>
        ApiResponse<ApplicationStatisticsModel> GetApplicationUsageTotalsWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a count of content-level interactions grouped by assistant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;AssistantUsageModel&gt;</returns>
        List<AssistantUsageModel> GetInteractionsAggregatedByAssistant (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a count of content-level interactions grouped by assistant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;AssistantUsageModel&gt;</returns>
        ApiResponse<List<AssistantUsageModel>> GetInteractionsAggregatedByAssistantWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a count of content-level interactions grouped by device target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;DeviceTargetUsageModel&gt;</returns>
        List<DeviceTargetUsageModel> GetInteractionsAggregatedByDeviceTarget (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a count of content-level interactions grouped by device target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;DeviceTargetUsageModel&gt;</returns>
        ApiResponse<List<DeviceTargetUsageModel>> GetInteractionsAggregatedByDeviceTargetWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a count of content-level interactions grouped by interface type (e.g. screen, audio, chat)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;InterfaceUsageModel&gt;</returns>
        List<InterfaceUsageModel> GetInteractionsAggregatedByInterfaceType (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a count of content-level interactions grouped by interface type (e.g. screen, audio, chat)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;InterfaceUsageModel&gt;</returns>
        ApiResponse<List<InterfaceUsageModel>> GetInteractionsAggregatedByInterfaceTypeWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a count of content-level interactions grouped by locale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;LocaleUsageModel&gt;</returns>
        List<LocaleUsageModel> GetInteractionsAggregatedByLocale (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a count of content-level interactions grouped by locale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;LocaleUsageModel&gt;</returns>
        ApiResponse<List<LocaleUsageModel>> GetInteractionsAggregatedByLocaleWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a histogram of content-level interactions (raw requests)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;DatedUsageModel&gt;</returns>
        List<DatedUsageModel> GetInteractionsHistogram (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a histogram of content-level interactions (raw requests)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;DatedUsageModel&gt;</returns>
        ApiResponse<List<DatedUsageModel>> GetInteractionsHistogramWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get new user count for content item grouped by assistant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;AssistantUsageModel&gt;</returns>
        List<AssistantUsageModel> GetNewUsersAggregatedByAssistant (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get new user count for content item grouped by assistant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;AssistantUsageModel&gt;</returns>
        ApiResponse<List<AssistantUsageModel>> GetNewUsersAggregatedByAssistantWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get new user count for content item grouped by device target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;DeviceTargetUsageModel&gt;</returns>
        List<DeviceTargetUsageModel> GetNewUsersAggregatedByDeviceTarget (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get new user count for content item grouped by device target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;DeviceTargetUsageModel&gt;</returns>
        ApiResponse<List<DeviceTargetUsageModel>> GetNewUsersAggregatedByDeviceTargetWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get new user count for content item grouped by interface (e.g. screen, audio, chat)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;InterfaceUsageModel&gt;</returns>
        List<InterfaceUsageModel> GetNewUsersAggregatedByInterface (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get new user count for content item grouped by interface (e.g. screen, audio, chat)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;InterfaceUsageModel&gt;</returns>
        ApiResponse<List<InterfaceUsageModel>> GetNewUsersAggregatedByInterfaceWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get new user count for content item grouped by locale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;LocaleUsageModel&gt;</returns>
        List<LocaleUsageModel> GetNewUsersAggregatedByLocale (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get new user count for content item grouped by locale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;LocaleUsageModel&gt;</returns>
        ApiResponse<List<LocaleUsageModel>> GetNewUsersAggregatedByLocaleWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get histogram of new users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;DatedUsageModel&gt;</returns>
        List<DatedUsageModel> GetNewUsersHistogram (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get histogram of new users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;DatedUsageModel&gt;</returns>
        ApiResponse<List<DatedUsageModel>> GetNewUsersHistogramWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a count of content-level sessions grouped by assistant platform
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;AssistantUsageModel&gt;</returns>
        List<AssistantUsageModel> GetSessionsAggregatedByAssistant (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a count of content-level sessions grouped by assistant platform
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;AssistantUsageModel&gt;</returns>
        ApiResponse<List<AssistantUsageModel>> GetSessionsAggregatedByAssistantWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a count of content-level sessions grouped by device target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;DeviceTargetUsageModel&gt;</returns>
        List<DeviceTargetUsageModel> GetSessionsAggregatedByDeviceTarget (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a count of content-level sessions grouped by device target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;DeviceTargetUsageModel&gt;</returns>
        ApiResponse<List<DeviceTargetUsageModel>> GetSessionsAggregatedByDeviceTargetWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a count of content-level sessions grouped by interface type (e.g. screen, audio, chat)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;InterfaceUsageModel&gt;</returns>
        List<InterfaceUsageModel> GetSessionsAggregatedByInterfaceType (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a count of content-level sessions grouped by interface type (e.g. screen, audio, chat)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;InterfaceUsageModel&gt;</returns>
        ApiResponse<List<InterfaceUsageModel>> GetSessionsAggregatedByInterfaceTypeWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a count of content-level sessions grouped by locale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;LocaleUsageModel&gt;</returns>
        List<LocaleUsageModel> GetSessionsAggregatedByLocale (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a count of content-level sessions grouped by locale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;LocaleUsageModel&gt;</returns>
        ApiResponse<List<LocaleUsageModel>> GetSessionsAggregatedByLocaleWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a histogram of sessions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;DatedUsageModel&gt;</returns>
        List<DatedUsageModel> GetSessionsHistogram (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a histogram of sessions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;DatedUsageModel&gt;</returns>
        ApiResponse<List<DatedUsageModel>> GetSessionsHistogramWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get content-level user count grouped by assistant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;AssistantUsageModel&gt;</returns>
        List<AssistantUsageModel> GetUsersAggregatedByAssistant (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get content-level user count grouped by assistant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;AssistantUsageModel&gt;</returns>
        ApiResponse<List<AssistantUsageModel>> GetUsersAggregatedByAssistantWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get content-level user count grouped by device target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;DeviceTargetUsageModel&gt;</returns>
        List<DeviceTargetUsageModel> GetUsersAggregatedByDeviceTarget (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get content-level user count grouped by device target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;DeviceTargetUsageModel&gt;</returns>
        ApiResponse<List<DeviceTargetUsageModel>> GetUsersAggregatedByDeviceTargetWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get content-level user count grouped by interface (e.g. screen, audio, chat)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;InterfaceUsageModel&gt;</returns>
        List<InterfaceUsageModel> GetUsersAggregatedByInterface (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get content-level user count grouped by interface (e.g. screen, audio, chat)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;InterfaceUsageModel&gt;</returns>
        ApiResponse<List<InterfaceUsageModel>> GetUsersAggregatedByInterfaceWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get content-level user count grouped by locale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;LocaleUsageModel&gt;</returns>
        List<LocaleUsageModel> GetUsersAggregatedByLocale (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get content-level user count grouped by locale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;LocaleUsageModel&gt;</returns>
        ApiResponse<List<LocaleUsageModel>> GetUsersAggregatedByLocaleWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get user histogram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;DatedUsageModel&gt;</returns>
        List<DatedUsageModel> GetUsersHistogram (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get user histogram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;DatedUsageModel&gt;</returns>
        ApiResponse<List<DatedUsageModel>> GetUsersHistogramWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets the total usage counts for the given content item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApplicationStatisticsModel</returns>
        System.Threading.Tasks.Task<ApplicationStatisticsModel> GetApplicationUsageTotalsAsync (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Gets the total usage counts for the given content item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (ApplicationStatisticsModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationStatisticsModel>> GetApplicationUsageTotalsAsyncWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a count of content-level interactions grouped by assistant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;AssistantUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<AssistantUsageModel>> GetInteractionsAggregatedByAssistantAsync (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a count of content-level interactions grouped by assistant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AssistantUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AssistantUsageModel>>> GetInteractionsAggregatedByAssistantAsyncWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a count of content-level interactions grouped by device target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;DeviceTargetUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<DeviceTargetUsageModel>> GetInteractionsAggregatedByDeviceTargetAsync (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a count of content-level interactions grouped by device target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DeviceTargetUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DeviceTargetUsageModel>>> GetInteractionsAggregatedByDeviceTargetAsyncWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a count of content-level interactions grouped by interface type (e.g. screen, audio, chat)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;InterfaceUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<InterfaceUsageModel>> GetInteractionsAggregatedByInterfaceTypeAsync (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a count of content-level interactions grouped by interface type (e.g. screen, audio, chat)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InterfaceUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InterfaceUsageModel>>> GetInteractionsAggregatedByInterfaceTypeAsyncWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a count of content-level interactions grouped by locale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;LocaleUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<LocaleUsageModel>> GetInteractionsAggregatedByLocaleAsync (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a count of content-level interactions grouped by locale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LocaleUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LocaleUsageModel>>> GetInteractionsAggregatedByLocaleAsyncWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a histogram of content-level interactions (raw requests)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;DatedUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<DatedUsageModel>> GetInteractionsHistogramAsync (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a histogram of content-level interactions (raw requests)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DatedUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DatedUsageModel>>> GetInteractionsHistogramAsyncWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get new user count for content item grouped by assistant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;AssistantUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<AssistantUsageModel>> GetNewUsersAggregatedByAssistantAsync (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get new user count for content item grouped by assistant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AssistantUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AssistantUsageModel>>> GetNewUsersAggregatedByAssistantAsyncWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get new user count for content item grouped by device target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;DeviceTargetUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<DeviceTargetUsageModel>> GetNewUsersAggregatedByDeviceTargetAsync (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get new user count for content item grouped by device target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DeviceTargetUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DeviceTargetUsageModel>>> GetNewUsersAggregatedByDeviceTargetAsyncWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get new user count for content item grouped by interface (e.g. screen, audio, chat)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;InterfaceUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<InterfaceUsageModel>> GetNewUsersAggregatedByInterfaceAsync (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get new user count for content item grouped by interface (e.g. screen, audio, chat)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InterfaceUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InterfaceUsageModel>>> GetNewUsersAggregatedByInterfaceAsyncWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get new user count for content item grouped by locale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;LocaleUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<LocaleUsageModel>> GetNewUsersAggregatedByLocaleAsync (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get new user count for content item grouped by locale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LocaleUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LocaleUsageModel>>> GetNewUsersAggregatedByLocaleAsyncWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get histogram of new users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;DatedUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<DatedUsageModel>> GetNewUsersHistogramAsync (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get histogram of new users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DatedUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DatedUsageModel>>> GetNewUsersHistogramAsyncWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a count of content-level sessions grouped by assistant platform
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;AssistantUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<AssistantUsageModel>> GetSessionsAggregatedByAssistantAsync (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a count of content-level sessions grouped by assistant platform
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AssistantUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AssistantUsageModel>>> GetSessionsAggregatedByAssistantAsyncWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a count of content-level sessions grouped by device target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;DeviceTargetUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<DeviceTargetUsageModel>> GetSessionsAggregatedByDeviceTargetAsync (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a count of content-level sessions grouped by device target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DeviceTargetUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DeviceTargetUsageModel>>> GetSessionsAggregatedByDeviceTargetAsyncWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a count of content-level sessions grouped by interface type (e.g. screen, audio, chat)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;InterfaceUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<InterfaceUsageModel>> GetSessionsAggregatedByInterfaceTypeAsync (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a count of content-level sessions grouped by interface type (e.g. screen, audio, chat)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InterfaceUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InterfaceUsageModel>>> GetSessionsAggregatedByInterfaceTypeAsyncWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a count of content-level sessions grouped by locale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;LocaleUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<LocaleUsageModel>> GetSessionsAggregatedByLocaleAsync (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a count of content-level sessions grouped by locale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LocaleUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LocaleUsageModel>>> GetSessionsAggregatedByLocaleAsyncWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a histogram of sessions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;DatedUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<DatedUsageModel>> GetSessionsHistogramAsync (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a histogram of sessions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DatedUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DatedUsageModel>>> GetSessionsHistogramAsyncWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get content-level user count grouped by assistant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;AssistantUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<AssistantUsageModel>> GetUsersAggregatedByAssistantAsync (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get content-level user count grouped by assistant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AssistantUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AssistantUsageModel>>> GetUsersAggregatedByAssistantAsyncWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get content-level user count grouped by device target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;DeviceTargetUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<DeviceTargetUsageModel>> GetUsersAggregatedByDeviceTargetAsync (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get content-level user count grouped by device target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DeviceTargetUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DeviceTargetUsageModel>>> GetUsersAggregatedByDeviceTargetAsyncWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get content-level user count grouped by interface (e.g. screen, audio, chat)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;InterfaceUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<InterfaceUsageModel>> GetUsersAggregatedByInterfaceAsync (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get content-level user count grouped by interface (e.g. screen, audio, chat)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InterfaceUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InterfaceUsageModel>>> GetUsersAggregatedByInterfaceAsyncWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get content-level user count grouped by locale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;LocaleUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<LocaleUsageModel>> GetUsersAggregatedByLocaleAsync (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get content-level user count grouped by locale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LocaleUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LocaleUsageModel>>> GetUsersAggregatedByLocaleAsyncWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get user histogram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;DatedUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<DatedUsageModel>> GetUsersHistogramAsync (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get user histogram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DatedUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DatedUsageModel>>> GetUsersHistogramAsyncWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ContentApi : IContentApi
    {
        private Voicify.Sdk.Analytics.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ContentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContentApi(String basePath)
        {
            this.Configuration = new Voicify.Sdk.Analytics.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Voicify.Sdk.Analytics.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ContentApi(Voicify.Sdk.Analytics.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Voicify.Sdk.Analytics.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Voicify.Sdk.Analytics.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Voicify.Sdk.Analytics.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Voicify.Sdk.Analytics.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets the total usage counts for the given content item 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApplicationStatisticsModel</returns>
        public ApplicationStatisticsModel GetApplicationUsageTotals (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<ApplicationStatisticsModel> localVarResponse = GetApplicationUsageTotalsWithHttpInfo(applicationId, contentId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the total usage counts for the given content item 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of ApplicationStatisticsModel</returns>
        public ApiResponse< ApplicationStatisticsModel > GetApplicationUsageTotalsWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentApi->GetApplicationUsageTotals");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentApi->GetApplicationUsageTotals");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ContentApi->GetApplicationUsageTotals");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ContentApi->GetApplicationUsageTotals");

            var localVarPath = "/api/v2/Content/{applicationId}/{contentId}/totals/usage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationUsageTotals", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationStatisticsModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationStatisticsModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationStatisticsModel)));
        }

        /// <summary>
        /// Gets the total usage counts for the given content item 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApplicationStatisticsModel</returns>
        public async System.Threading.Tasks.Task<ApplicationStatisticsModel> GetApplicationUsageTotalsAsync (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<ApplicationStatisticsModel> localVarResponse = await GetApplicationUsageTotalsAsyncWithHttpInfo(applicationId, contentId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the total usage counts for the given content item 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (ApplicationStatisticsModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApplicationStatisticsModel>> GetApplicationUsageTotalsAsyncWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentApi->GetApplicationUsageTotals");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentApi->GetApplicationUsageTotals");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ContentApi->GetApplicationUsageTotals");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ContentApi->GetApplicationUsageTotals");

            var localVarPath = "/api/v2/Content/{applicationId}/{contentId}/totals/usage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationUsageTotals", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationStatisticsModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationStatisticsModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationStatisticsModel)));
        }

        /// <summary>
        /// Get a count of content-level interactions grouped by assistant 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;AssistantUsageModel&gt;</returns>
        public List<AssistantUsageModel> GetInteractionsAggregatedByAssistant (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<AssistantUsageModel>> localVarResponse = GetInteractionsAggregatedByAssistantWithHttpInfo(applicationId, contentId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a count of content-level interactions grouped by assistant 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;AssistantUsageModel&gt;</returns>
        public ApiResponse< List<AssistantUsageModel> > GetInteractionsAggregatedByAssistantWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentApi->GetInteractionsAggregatedByAssistant");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentApi->GetInteractionsAggregatedByAssistant");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ContentApi->GetInteractionsAggregatedByAssistant");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ContentApi->GetInteractionsAggregatedByAssistant");

            var localVarPath = "/api/v2/Content/{applicationId}/{contentId}/interactions/aggregation/assistant";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInteractionsAggregatedByAssistant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssistantUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AssistantUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssistantUsageModel>)));
        }

        /// <summary>
        /// Get a count of content-level interactions grouped by assistant 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;AssistantUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<AssistantUsageModel>> GetInteractionsAggregatedByAssistantAsync (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<AssistantUsageModel>> localVarResponse = await GetInteractionsAggregatedByAssistantAsyncWithHttpInfo(applicationId, contentId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a count of content-level interactions grouped by assistant 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AssistantUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AssistantUsageModel>>> GetInteractionsAggregatedByAssistantAsyncWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentApi->GetInteractionsAggregatedByAssistant");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentApi->GetInteractionsAggregatedByAssistant");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ContentApi->GetInteractionsAggregatedByAssistant");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ContentApi->GetInteractionsAggregatedByAssistant");

            var localVarPath = "/api/v2/Content/{applicationId}/{contentId}/interactions/aggregation/assistant";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInteractionsAggregatedByAssistant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssistantUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AssistantUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssistantUsageModel>)));
        }

        /// <summary>
        /// Get a count of content-level interactions grouped by device target 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;DeviceTargetUsageModel&gt;</returns>
        public List<DeviceTargetUsageModel> GetInteractionsAggregatedByDeviceTarget (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<DeviceTargetUsageModel>> localVarResponse = GetInteractionsAggregatedByDeviceTargetWithHttpInfo(applicationId, contentId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a count of content-level interactions grouped by device target 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;DeviceTargetUsageModel&gt;</returns>
        public ApiResponse< List<DeviceTargetUsageModel> > GetInteractionsAggregatedByDeviceTargetWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentApi->GetInteractionsAggregatedByDeviceTarget");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentApi->GetInteractionsAggregatedByDeviceTarget");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ContentApi->GetInteractionsAggregatedByDeviceTarget");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ContentApi->GetInteractionsAggregatedByDeviceTarget");

            var localVarPath = "/api/v2/Content/{applicationId}/{contentId}/interactions/aggregation/deviceTarget";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInteractionsAggregatedByDeviceTarget", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DeviceTargetUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DeviceTargetUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DeviceTargetUsageModel>)));
        }

        /// <summary>
        /// Get a count of content-level interactions grouped by device target 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;DeviceTargetUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<DeviceTargetUsageModel>> GetInteractionsAggregatedByDeviceTargetAsync (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<DeviceTargetUsageModel>> localVarResponse = await GetInteractionsAggregatedByDeviceTargetAsyncWithHttpInfo(applicationId, contentId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a count of content-level interactions grouped by device target 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DeviceTargetUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DeviceTargetUsageModel>>> GetInteractionsAggregatedByDeviceTargetAsyncWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentApi->GetInteractionsAggregatedByDeviceTarget");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentApi->GetInteractionsAggregatedByDeviceTarget");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ContentApi->GetInteractionsAggregatedByDeviceTarget");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ContentApi->GetInteractionsAggregatedByDeviceTarget");

            var localVarPath = "/api/v2/Content/{applicationId}/{contentId}/interactions/aggregation/deviceTarget";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInteractionsAggregatedByDeviceTarget", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DeviceTargetUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DeviceTargetUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DeviceTargetUsageModel>)));
        }

        /// <summary>
        /// Get a count of content-level interactions grouped by interface type (e.g. screen, audio, chat) 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;InterfaceUsageModel&gt;</returns>
        public List<InterfaceUsageModel> GetInteractionsAggregatedByInterfaceType (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<InterfaceUsageModel>> localVarResponse = GetInteractionsAggregatedByInterfaceTypeWithHttpInfo(applicationId, contentId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a count of content-level interactions grouped by interface type (e.g. screen, audio, chat) 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;InterfaceUsageModel&gt;</returns>
        public ApiResponse< List<InterfaceUsageModel> > GetInteractionsAggregatedByInterfaceTypeWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentApi->GetInteractionsAggregatedByInterfaceType");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentApi->GetInteractionsAggregatedByInterfaceType");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ContentApi->GetInteractionsAggregatedByInterfaceType");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ContentApi->GetInteractionsAggregatedByInterfaceType");

            var localVarPath = "/api/v2/Content/{applicationId}/{contentId}/interactions/aggregation/interfaceType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInteractionsAggregatedByInterfaceType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InterfaceUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InterfaceUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InterfaceUsageModel>)));
        }

        /// <summary>
        /// Get a count of content-level interactions grouped by interface type (e.g. screen, audio, chat) 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;InterfaceUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<InterfaceUsageModel>> GetInteractionsAggregatedByInterfaceTypeAsync (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<InterfaceUsageModel>> localVarResponse = await GetInteractionsAggregatedByInterfaceTypeAsyncWithHttpInfo(applicationId, contentId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a count of content-level interactions grouped by interface type (e.g. screen, audio, chat) 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InterfaceUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InterfaceUsageModel>>> GetInteractionsAggregatedByInterfaceTypeAsyncWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentApi->GetInteractionsAggregatedByInterfaceType");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentApi->GetInteractionsAggregatedByInterfaceType");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ContentApi->GetInteractionsAggregatedByInterfaceType");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ContentApi->GetInteractionsAggregatedByInterfaceType");

            var localVarPath = "/api/v2/Content/{applicationId}/{contentId}/interactions/aggregation/interfaceType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInteractionsAggregatedByInterfaceType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InterfaceUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InterfaceUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InterfaceUsageModel>)));
        }

        /// <summary>
        /// Get a count of content-level interactions grouped by locale 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;LocaleUsageModel&gt;</returns>
        public List<LocaleUsageModel> GetInteractionsAggregatedByLocale (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<LocaleUsageModel>> localVarResponse = GetInteractionsAggregatedByLocaleWithHttpInfo(applicationId, contentId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a count of content-level interactions grouped by locale 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;LocaleUsageModel&gt;</returns>
        public ApiResponse< List<LocaleUsageModel> > GetInteractionsAggregatedByLocaleWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentApi->GetInteractionsAggregatedByLocale");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentApi->GetInteractionsAggregatedByLocale");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ContentApi->GetInteractionsAggregatedByLocale");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ContentApi->GetInteractionsAggregatedByLocale");

            var localVarPath = "/api/v2/Content/{applicationId}/{contentId}/interactions/aggregation/locale";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInteractionsAggregatedByLocale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LocaleUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LocaleUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LocaleUsageModel>)));
        }

        /// <summary>
        /// Get a count of content-level interactions grouped by locale 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;LocaleUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<LocaleUsageModel>> GetInteractionsAggregatedByLocaleAsync (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<LocaleUsageModel>> localVarResponse = await GetInteractionsAggregatedByLocaleAsyncWithHttpInfo(applicationId, contentId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a count of content-level interactions grouped by locale 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LocaleUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LocaleUsageModel>>> GetInteractionsAggregatedByLocaleAsyncWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentApi->GetInteractionsAggregatedByLocale");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentApi->GetInteractionsAggregatedByLocale");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ContentApi->GetInteractionsAggregatedByLocale");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ContentApi->GetInteractionsAggregatedByLocale");

            var localVarPath = "/api/v2/Content/{applicationId}/{contentId}/interactions/aggregation/locale";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInteractionsAggregatedByLocale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LocaleUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LocaleUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LocaleUsageModel>)));
        }

        /// <summary>
        /// Get a histogram of content-level interactions (raw requests) 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;DatedUsageModel&gt;</returns>
        public List<DatedUsageModel> GetInteractionsHistogram (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<DatedUsageModel>> localVarResponse = GetInteractionsHistogramWithHttpInfo(applicationId, contentId, startDate, endDate, interval, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a histogram of content-level interactions (raw requests) 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;DatedUsageModel&gt;</returns>
        public ApiResponse< List<DatedUsageModel> > GetInteractionsHistogramWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentApi->GetInteractionsHistogram");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentApi->GetInteractionsHistogram");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ContentApi->GetInteractionsHistogram");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ContentApi->GetInteractionsHistogram");

            var localVarPath = "/api/v2/Content/{applicationId}/{contentId}/interactions/histogram";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInteractionsHistogram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DatedUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DatedUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DatedUsageModel>)));
        }

        /// <summary>
        /// Get a histogram of content-level interactions (raw requests) 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;DatedUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<DatedUsageModel>> GetInteractionsHistogramAsync (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<DatedUsageModel>> localVarResponse = await GetInteractionsHistogramAsyncWithHttpInfo(applicationId, contentId, startDate, endDate, interval, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a histogram of content-level interactions (raw requests) 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DatedUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DatedUsageModel>>> GetInteractionsHistogramAsyncWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentApi->GetInteractionsHistogram");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentApi->GetInteractionsHistogram");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ContentApi->GetInteractionsHistogram");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ContentApi->GetInteractionsHistogram");

            var localVarPath = "/api/v2/Content/{applicationId}/{contentId}/interactions/histogram";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInteractionsHistogram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DatedUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DatedUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DatedUsageModel>)));
        }

        /// <summary>
        /// Get new user count for content item grouped by assistant 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;AssistantUsageModel&gt;</returns>
        public List<AssistantUsageModel> GetNewUsersAggregatedByAssistant (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<AssistantUsageModel>> localVarResponse = GetNewUsersAggregatedByAssistantWithHttpInfo(applicationId, contentId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get new user count for content item grouped by assistant 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;AssistantUsageModel&gt;</returns>
        public ApiResponse< List<AssistantUsageModel> > GetNewUsersAggregatedByAssistantWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentApi->GetNewUsersAggregatedByAssistant");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentApi->GetNewUsersAggregatedByAssistant");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ContentApi->GetNewUsersAggregatedByAssistant");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ContentApi->GetNewUsersAggregatedByAssistant");

            var localVarPath = "/api/v2/Content/{applicationId}/{contentId}/newUsers/aggregation/assistant";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNewUsersAggregatedByAssistant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssistantUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AssistantUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssistantUsageModel>)));
        }

        /// <summary>
        /// Get new user count for content item grouped by assistant 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;AssistantUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<AssistantUsageModel>> GetNewUsersAggregatedByAssistantAsync (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<AssistantUsageModel>> localVarResponse = await GetNewUsersAggregatedByAssistantAsyncWithHttpInfo(applicationId, contentId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get new user count for content item grouped by assistant 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AssistantUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AssistantUsageModel>>> GetNewUsersAggregatedByAssistantAsyncWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentApi->GetNewUsersAggregatedByAssistant");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentApi->GetNewUsersAggregatedByAssistant");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ContentApi->GetNewUsersAggregatedByAssistant");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ContentApi->GetNewUsersAggregatedByAssistant");

            var localVarPath = "/api/v2/Content/{applicationId}/{contentId}/newUsers/aggregation/assistant";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNewUsersAggregatedByAssistant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssistantUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AssistantUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssistantUsageModel>)));
        }

        /// <summary>
        /// Get new user count for content item grouped by device target 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;DeviceTargetUsageModel&gt;</returns>
        public List<DeviceTargetUsageModel> GetNewUsersAggregatedByDeviceTarget (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<DeviceTargetUsageModel>> localVarResponse = GetNewUsersAggregatedByDeviceTargetWithHttpInfo(applicationId, contentId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get new user count for content item grouped by device target 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;DeviceTargetUsageModel&gt;</returns>
        public ApiResponse< List<DeviceTargetUsageModel> > GetNewUsersAggregatedByDeviceTargetWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentApi->GetNewUsersAggregatedByDeviceTarget");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentApi->GetNewUsersAggregatedByDeviceTarget");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ContentApi->GetNewUsersAggregatedByDeviceTarget");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ContentApi->GetNewUsersAggregatedByDeviceTarget");

            var localVarPath = "/api/v2/Content/{applicationId}/{contentId}/newUsers/aggregation/deviceTarget";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNewUsersAggregatedByDeviceTarget", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DeviceTargetUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DeviceTargetUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DeviceTargetUsageModel>)));
        }

        /// <summary>
        /// Get new user count for content item grouped by device target 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;DeviceTargetUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<DeviceTargetUsageModel>> GetNewUsersAggregatedByDeviceTargetAsync (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<DeviceTargetUsageModel>> localVarResponse = await GetNewUsersAggregatedByDeviceTargetAsyncWithHttpInfo(applicationId, contentId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get new user count for content item grouped by device target 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DeviceTargetUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DeviceTargetUsageModel>>> GetNewUsersAggregatedByDeviceTargetAsyncWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentApi->GetNewUsersAggregatedByDeviceTarget");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentApi->GetNewUsersAggregatedByDeviceTarget");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ContentApi->GetNewUsersAggregatedByDeviceTarget");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ContentApi->GetNewUsersAggregatedByDeviceTarget");

            var localVarPath = "/api/v2/Content/{applicationId}/{contentId}/newUsers/aggregation/deviceTarget";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNewUsersAggregatedByDeviceTarget", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DeviceTargetUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DeviceTargetUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DeviceTargetUsageModel>)));
        }

        /// <summary>
        /// Get new user count for content item grouped by interface (e.g. screen, audio, chat) 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;InterfaceUsageModel&gt;</returns>
        public List<InterfaceUsageModel> GetNewUsersAggregatedByInterface (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<InterfaceUsageModel>> localVarResponse = GetNewUsersAggregatedByInterfaceWithHttpInfo(applicationId, contentId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get new user count for content item grouped by interface (e.g. screen, audio, chat) 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;InterfaceUsageModel&gt;</returns>
        public ApiResponse< List<InterfaceUsageModel> > GetNewUsersAggregatedByInterfaceWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentApi->GetNewUsersAggregatedByInterface");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentApi->GetNewUsersAggregatedByInterface");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ContentApi->GetNewUsersAggregatedByInterface");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ContentApi->GetNewUsersAggregatedByInterface");

            var localVarPath = "/api/v2/Content/{applicationId}/{contentId}/newUsers/aggregation/interfaceType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNewUsersAggregatedByInterface", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InterfaceUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InterfaceUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InterfaceUsageModel>)));
        }

        /// <summary>
        /// Get new user count for content item grouped by interface (e.g. screen, audio, chat) 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;InterfaceUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<InterfaceUsageModel>> GetNewUsersAggregatedByInterfaceAsync (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<InterfaceUsageModel>> localVarResponse = await GetNewUsersAggregatedByInterfaceAsyncWithHttpInfo(applicationId, contentId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get new user count for content item grouped by interface (e.g. screen, audio, chat) 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InterfaceUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InterfaceUsageModel>>> GetNewUsersAggregatedByInterfaceAsyncWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentApi->GetNewUsersAggregatedByInterface");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentApi->GetNewUsersAggregatedByInterface");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ContentApi->GetNewUsersAggregatedByInterface");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ContentApi->GetNewUsersAggregatedByInterface");

            var localVarPath = "/api/v2/Content/{applicationId}/{contentId}/newUsers/aggregation/interfaceType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNewUsersAggregatedByInterface", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InterfaceUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InterfaceUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InterfaceUsageModel>)));
        }

        /// <summary>
        /// Get new user count for content item grouped by locale 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;LocaleUsageModel&gt;</returns>
        public List<LocaleUsageModel> GetNewUsersAggregatedByLocale (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<LocaleUsageModel>> localVarResponse = GetNewUsersAggregatedByLocaleWithHttpInfo(applicationId, contentId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get new user count for content item grouped by locale 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;LocaleUsageModel&gt;</returns>
        public ApiResponse< List<LocaleUsageModel> > GetNewUsersAggregatedByLocaleWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentApi->GetNewUsersAggregatedByLocale");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentApi->GetNewUsersAggregatedByLocale");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ContentApi->GetNewUsersAggregatedByLocale");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ContentApi->GetNewUsersAggregatedByLocale");

            var localVarPath = "/api/v2/Content/{applicationId}/{contentId}/newUsers/aggregation/locale";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNewUsersAggregatedByLocale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LocaleUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LocaleUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LocaleUsageModel>)));
        }

        /// <summary>
        /// Get new user count for content item grouped by locale 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;LocaleUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<LocaleUsageModel>> GetNewUsersAggregatedByLocaleAsync (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<LocaleUsageModel>> localVarResponse = await GetNewUsersAggregatedByLocaleAsyncWithHttpInfo(applicationId, contentId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get new user count for content item grouped by locale 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LocaleUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LocaleUsageModel>>> GetNewUsersAggregatedByLocaleAsyncWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentApi->GetNewUsersAggregatedByLocale");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentApi->GetNewUsersAggregatedByLocale");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ContentApi->GetNewUsersAggregatedByLocale");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ContentApi->GetNewUsersAggregatedByLocale");

            var localVarPath = "/api/v2/Content/{applicationId}/{contentId}/newUsers/aggregation/locale";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNewUsersAggregatedByLocale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LocaleUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LocaleUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LocaleUsageModel>)));
        }

        /// <summary>
        /// Get histogram of new users 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;DatedUsageModel&gt;</returns>
        public List<DatedUsageModel> GetNewUsersHistogram (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<DatedUsageModel>> localVarResponse = GetNewUsersHistogramWithHttpInfo(applicationId, contentId, startDate, endDate, interval, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get histogram of new users 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;DatedUsageModel&gt;</returns>
        public ApiResponse< List<DatedUsageModel> > GetNewUsersHistogramWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentApi->GetNewUsersHistogram");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentApi->GetNewUsersHistogram");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ContentApi->GetNewUsersHistogram");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ContentApi->GetNewUsersHistogram");

            var localVarPath = "/api/v2/Content/{applicationId}/{contentId}/newUsers/histogram";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNewUsersHistogram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DatedUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DatedUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DatedUsageModel>)));
        }

        /// <summary>
        /// Get histogram of new users 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;DatedUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<DatedUsageModel>> GetNewUsersHistogramAsync (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<DatedUsageModel>> localVarResponse = await GetNewUsersHistogramAsyncWithHttpInfo(applicationId, contentId, startDate, endDate, interval, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get histogram of new users 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DatedUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DatedUsageModel>>> GetNewUsersHistogramAsyncWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentApi->GetNewUsersHistogram");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentApi->GetNewUsersHistogram");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ContentApi->GetNewUsersHistogram");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ContentApi->GetNewUsersHistogram");

            var localVarPath = "/api/v2/Content/{applicationId}/{contentId}/newUsers/histogram";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNewUsersHistogram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DatedUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DatedUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DatedUsageModel>)));
        }

        /// <summary>
        /// Get a count of content-level sessions grouped by assistant platform 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;AssistantUsageModel&gt;</returns>
        public List<AssistantUsageModel> GetSessionsAggregatedByAssistant (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<AssistantUsageModel>> localVarResponse = GetSessionsAggregatedByAssistantWithHttpInfo(applicationId, contentId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a count of content-level sessions grouped by assistant platform 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;AssistantUsageModel&gt;</returns>
        public ApiResponse< List<AssistantUsageModel> > GetSessionsAggregatedByAssistantWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentApi->GetSessionsAggregatedByAssistant");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentApi->GetSessionsAggregatedByAssistant");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ContentApi->GetSessionsAggregatedByAssistant");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ContentApi->GetSessionsAggregatedByAssistant");

            var localVarPath = "/api/v2/Content/{applicationId}/{contentId}/sessions/aggregation/assistant";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSessionsAggregatedByAssistant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssistantUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AssistantUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssistantUsageModel>)));
        }

        /// <summary>
        /// Get a count of content-level sessions grouped by assistant platform 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;AssistantUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<AssistantUsageModel>> GetSessionsAggregatedByAssistantAsync (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<AssistantUsageModel>> localVarResponse = await GetSessionsAggregatedByAssistantAsyncWithHttpInfo(applicationId, contentId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a count of content-level sessions grouped by assistant platform 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AssistantUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AssistantUsageModel>>> GetSessionsAggregatedByAssistantAsyncWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentApi->GetSessionsAggregatedByAssistant");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentApi->GetSessionsAggregatedByAssistant");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ContentApi->GetSessionsAggregatedByAssistant");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ContentApi->GetSessionsAggregatedByAssistant");

            var localVarPath = "/api/v2/Content/{applicationId}/{contentId}/sessions/aggregation/assistant";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSessionsAggregatedByAssistant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssistantUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AssistantUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssistantUsageModel>)));
        }

        /// <summary>
        /// Get a count of content-level sessions grouped by device target 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;DeviceTargetUsageModel&gt;</returns>
        public List<DeviceTargetUsageModel> GetSessionsAggregatedByDeviceTarget (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<DeviceTargetUsageModel>> localVarResponse = GetSessionsAggregatedByDeviceTargetWithHttpInfo(applicationId, contentId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a count of content-level sessions grouped by device target 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;DeviceTargetUsageModel&gt;</returns>
        public ApiResponse< List<DeviceTargetUsageModel> > GetSessionsAggregatedByDeviceTargetWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentApi->GetSessionsAggregatedByDeviceTarget");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentApi->GetSessionsAggregatedByDeviceTarget");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ContentApi->GetSessionsAggregatedByDeviceTarget");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ContentApi->GetSessionsAggregatedByDeviceTarget");

            var localVarPath = "/api/v2/Content/{applicationId}/{contentId}/sessions/aggregation/deviceTarget";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSessionsAggregatedByDeviceTarget", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DeviceTargetUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DeviceTargetUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DeviceTargetUsageModel>)));
        }

        /// <summary>
        /// Get a count of content-level sessions grouped by device target 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;DeviceTargetUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<DeviceTargetUsageModel>> GetSessionsAggregatedByDeviceTargetAsync (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<DeviceTargetUsageModel>> localVarResponse = await GetSessionsAggregatedByDeviceTargetAsyncWithHttpInfo(applicationId, contentId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a count of content-level sessions grouped by device target 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DeviceTargetUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DeviceTargetUsageModel>>> GetSessionsAggregatedByDeviceTargetAsyncWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentApi->GetSessionsAggregatedByDeviceTarget");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentApi->GetSessionsAggregatedByDeviceTarget");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ContentApi->GetSessionsAggregatedByDeviceTarget");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ContentApi->GetSessionsAggregatedByDeviceTarget");

            var localVarPath = "/api/v2/Content/{applicationId}/{contentId}/sessions/aggregation/deviceTarget";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSessionsAggregatedByDeviceTarget", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DeviceTargetUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DeviceTargetUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DeviceTargetUsageModel>)));
        }

        /// <summary>
        /// Get a count of content-level sessions grouped by interface type (e.g. screen, audio, chat) 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;InterfaceUsageModel&gt;</returns>
        public List<InterfaceUsageModel> GetSessionsAggregatedByInterfaceType (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<InterfaceUsageModel>> localVarResponse = GetSessionsAggregatedByInterfaceTypeWithHttpInfo(applicationId, contentId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a count of content-level sessions grouped by interface type (e.g. screen, audio, chat) 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;InterfaceUsageModel&gt;</returns>
        public ApiResponse< List<InterfaceUsageModel> > GetSessionsAggregatedByInterfaceTypeWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentApi->GetSessionsAggregatedByInterfaceType");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentApi->GetSessionsAggregatedByInterfaceType");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ContentApi->GetSessionsAggregatedByInterfaceType");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ContentApi->GetSessionsAggregatedByInterfaceType");

            var localVarPath = "/api/v2/Content/{applicationId}/{contentId}/sessions/aggregation/interfaceType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSessionsAggregatedByInterfaceType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InterfaceUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InterfaceUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InterfaceUsageModel>)));
        }

        /// <summary>
        /// Get a count of content-level sessions grouped by interface type (e.g. screen, audio, chat) 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;InterfaceUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<InterfaceUsageModel>> GetSessionsAggregatedByInterfaceTypeAsync (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<InterfaceUsageModel>> localVarResponse = await GetSessionsAggregatedByInterfaceTypeAsyncWithHttpInfo(applicationId, contentId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a count of content-level sessions grouped by interface type (e.g. screen, audio, chat) 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InterfaceUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InterfaceUsageModel>>> GetSessionsAggregatedByInterfaceTypeAsyncWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentApi->GetSessionsAggregatedByInterfaceType");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentApi->GetSessionsAggregatedByInterfaceType");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ContentApi->GetSessionsAggregatedByInterfaceType");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ContentApi->GetSessionsAggregatedByInterfaceType");

            var localVarPath = "/api/v2/Content/{applicationId}/{contentId}/sessions/aggregation/interfaceType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSessionsAggregatedByInterfaceType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InterfaceUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InterfaceUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InterfaceUsageModel>)));
        }

        /// <summary>
        /// Get a count of content-level sessions grouped by locale 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;LocaleUsageModel&gt;</returns>
        public List<LocaleUsageModel> GetSessionsAggregatedByLocale (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<LocaleUsageModel>> localVarResponse = GetSessionsAggregatedByLocaleWithHttpInfo(applicationId, contentId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a count of content-level sessions grouped by locale 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;LocaleUsageModel&gt;</returns>
        public ApiResponse< List<LocaleUsageModel> > GetSessionsAggregatedByLocaleWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentApi->GetSessionsAggregatedByLocale");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentApi->GetSessionsAggregatedByLocale");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ContentApi->GetSessionsAggregatedByLocale");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ContentApi->GetSessionsAggregatedByLocale");

            var localVarPath = "/api/v2/Content/{applicationId}/{contentId}/sessions/aggregation/locale";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSessionsAggregatedByLocale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LocaleUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LocaleUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LocaleUsageModel>)));
        }

        /// <summary>
        /// Get a count of content-level sessions grouped by locale 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;LocaleUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<LocaleUsageModel>> GetSessionsAggregatedByLocaleAsync (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<LocaleUsageModel>> localVarResponse = await GetSessionsAggregatedByLocaleAsyncWithHttpInfo(applicationId, contentId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a count of content-level sessions grouped by locale 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LocaleUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LocaleUsageModel>>> GetSessionsAggregatedByLocaleAsyncWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentApi->GetSessionsAggregatedByLocale");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentApi->GetSessionsAggregatedByLocale");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ContentApi->GetSessionsAggregatedByLocale");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ContentApi->GetSessionsAggregatedByLocale");

            var localVarPath = "/api/v2/Content/{applicationId}/{contentId}/sessions/aggregation/locale";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSessionsAggregatedByLocale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LocaleUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LocaleUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LocaleUsageModel>)));
        }

        /// <summary>
        /// Get a histogram of sessions 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;DatedUsageModel&gt;</returns>
        public List<DatedUsageModel> GetSessionsHistogram (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<DatedUsageModel>> localVarResponse = GetSessionsHistogramWithHttpInfo(applicationId, contentId, startDate, endDate, interval, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a histogram of sessions 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;DatedUsageModel&gt;</returns>
        public ApiResponse< List<DatedUsageModel> > GetSessionsHistogramWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentApi->GetSessionsHistogram");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentApi->GetSessionsHistogram");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ContentApi->GetSessionsHistogram");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ContentApi->GetSessionsHistogram");

            var localVarPath = "/api/v2/Content/{applicationId}/{contentId}/sessions/histogram";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSessionsHistogram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DatedUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DatedUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DatedUsageModel>)));
        }

        /// <summary>
        /// Get a histogram of sessions 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;DatedUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<DatedUsageModel>> GetSessionsHistogramAsync (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<DatedUsageModel>> localVarResponse = await GetSessionsHistogramAsyncWithHttpInfo(applicationId, contentId, startDate, endDate, interval, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a histogram of sessions 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DatedUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DatedUsageModel>>> GetSessionsHistogramAsyncWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentApi->GetSessionsHistogram");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentApi->GetSessionsHistogram");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ContentApi->GetSessionsHistogram");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ContentApi->GetSessionsHistogram");

            var localVarPath = "/api/v2/Content/{applicationId}/{contentId}/sessions/histogram";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSessionsHistogram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DatedUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DatedUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DatedUsageModel>)));
        }

        /// <summary>
        /// Get content-level user count grouped by assistant 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;AssistantUsageModel&gt;</returns>
        public List<AssistantUsageModel> GetUsersAggregatedByAssistant (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<AssistantUsageModel>> localVarResponse = GetUsersAggregatedByAssistantWithHttpInfo(applicationId, contentId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get content-level user count grouped by assistant 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;AssistantUsageModel&gt;</returns>
        public ApiResponse< List<AssistantUsageModel> > GetUsersAggregatedByAssistantWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentApi->GetUsersAggregatedByAssistant");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentApi->GetUsersAggregatedByAssistant");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ContentApi->GetUsersAggregatedByAssistant");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ContentApi->GetUsersAggregatedByAssistant");

            var localVarPath = "/api/v2/Content/{applicationId}/{contentId}/users/aggregation/assistant";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersAggregatedByAssistant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssistantUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AssistantUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssistantUsageModel>)));
        }

        /// <summary>
        /// Get content-level user count grouped by assistant 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;AssistantUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<AssistantUsageModel>> GetUsersAggregatedByAssistantAsync (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<AssistantUsageModel>> localVarResponse = await GetUsersAggregatedByAssistantAsyncWithHttpInfo(applicationId, contentId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get content-level user count grouped by assistant 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AssistantUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AssistantUsageModel>>> GetUsersAggregatedByAssistantAsyncWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentApi->GetUsersAggregatedByAssistant");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentApi->GetUsersAggregatedByAssistant");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ContentApi->GetUsersAggregatedByAssistant");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ContentApi->GetUsersAggregatedByAssistant");

            var localVarPath = "/api/v2/Content/{applicationId}/{contentId}/users/aggregation/assistant";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersAggregatedByAssistant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssistantUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AssistantUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssistantUsageModel>)));
        }

        /// <summary>
        /// Get content-level user count grouped by device target 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;DeviceTargetUsageModel&gt;</returns>
        public List<DeviceTargetUsageModel> GetUsersAggregatedByDeviceTarget (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<DeviceTargetUsageModel>> localVarResponse = GetUsersAggregatedByDeviceTargetWithHttpInfo(applicationId, contentId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get content-level user count grouped by device target 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;DeviceTargetUsageModel&gt;</returns>
        public ApiResponse< List<DeviceTargetUsageModel> > GetUsersAggregatedByDeviceTargetWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentApi->GetUsersAggregatedByDeviceTarget");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentApi->GetUsersAggregatedByDeviceTarget");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ContentApi->GetUsersAggregatedByDeviceTarget");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ContentApi->GetUsersAggregatedByDeviceTarget");

            var localVarPath = "/api/v2/Content/{applicationId}/{contentId}/users/aggregation/deviceTarget";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersAggregatedByDeviceTarget", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DeviceTargetUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DeviceTargetUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DeviceTargetUsageModel>)));
        }

        /// <summary>
        /// Get content-level user count grouped by device target 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;DeviceTargetUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<DeviceTargetUsageModel>> GetUsersAggregatedByDeviceTargetAsync (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<DeviceTargetUsageModel>> localVarResponse = await GetUsersAggregatedByDeviceTargetAsyncWithHttpInfo(applicationId, contentId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get content-level user count grouped by device target 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DeviceTargetUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DeviceTargetUsageModel>>> GetUsersAggregatedByDeviceTargetAsyncWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentApi->GetUsersAggregatedByDeviceTarget");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentApi->GetUsersAggregatedByDeviceTarget");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ContentApi->GetUsersAggregatedByDeviceTarget");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ContentApi->GetUsersAggregatedByDeviceTarget");

            var localVarPath = "/api/v2/Content/{applicationId}/{contentId}/users/aggregation/deviceTarget";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersAggregatedByDeviceTarget", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DeviceTargetUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DeviceTargetUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DeviceTargetUsageModel>)));
        }

        /// <summary>
        /// Get content-level user count grouped by interface (e.g. screen, audio, chat) 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;InterfaceUsageModel&gt;</returns>
        public List<InterfaceUsageModel> GetUsersAggregatedByInterface (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<InterfaceUsageModel>> localVarResponse = GetUsersAggregatedByInterfaceWithHttpInfo(applicationId, contentId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get content-level user count grouped by interface (e.g. screen, audio, chat) 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;InterfaceUsageModel&gt;</returns>
        public ApiResponse< List<InterfaceUsageModel> > GetUsersAggregatedByInterfaceWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentApi->GetUsersAggregatedByInterface");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentApi->GetUsersAggregatedByInterface");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ContentApi->GetUsersAggregatedByInterface");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ContentApi->GetUsersAggregatedByInterface");

            var localVarPath = "/api/v2/Content/{applicationId}/{contentId}/users/aggregation/interfaceType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersAggregatedByInterface", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InterfaceUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InterfaceUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InterfaceUsageModel>)));
        }

        /// <summary>
        /// Get content-level user count grouped by interface (e.g. screen, audio, chat) 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;InterfaceUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<InterfaceUsageModel>> GetUsersAggregatedByInterfaceAsync (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<InterfaceUsageModel>> localVarResponse = await GetUsersAggregatedByInterfaceAsyncWithHttpInfo(applicationId, contentId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get content-level user count grouped by interface (e.g. screen, audio, chat) 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InterfaceUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InterfaceUsageModel>>> GetUsersAggregatedByInterfaceAsyncWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentApi->GetUsersAggregatedByInterface");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentApi->GetUsersAggregatedByInterface");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ContentApi->GetUsersAggregatedByInterface");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ContentApi->GetUsersAggregatedByInterface");

            var localVarPath = "/api/v2/Content/{applicationId}/{contentId}/users/aggregation/interfaceType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersAggregatedByInterface", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InterfaceUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InterfaceUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InterfaceUsageModel>)));
        }

        /// <summary>
        /// Get content-level user count grouped by locale 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;LocaleUsageModel&gt;</returns>
        public List<LocaleUsageModel> GetUsersAggregatedByLocale (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<LocaleUsageModel>> localVarResponse = GetUsersAggregatedByLocaleWithHttpInfo(applicationId, contentId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get content-level user count grouped by locale 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;LocaleUsageModel&gt;</returns>
        public ApiResponse< List<LocaleUsageModel> > GetUsersAggregatedByLocaleWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentApi->GetUsersAggregatedByLocale");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentApi->GetUsersAggregatedByLocale");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ContentApi->GetUsersAggregatedByLocale");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ContentApi->GetUsersAggregatedByLocale");

            var localVarPath = "/api/v2/Content/{applicationId}/{contentId}/users/aggregation/locale";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersAggregatedByLocale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LocaleUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LocaleUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LocaleUsageModel>)));
        }

        /// <summary>
        /// Get content-level user count grouped by locale 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;LocaleUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<LocaleUsageModel>> GetUsersAggregatedByLocaleAsync (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<LocaleUsageModel>> localVarResponse = await GetUsersAggregatedByLocaleAsyncWithHttpInfo(applicationId, contentId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get content-level user count grouped by locale 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LocaleUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LocaleUsageModel>>> GetUsersAggregatedByLocaleAsyncWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentApi->GetUsersAggregatedByLocale");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentApi->GetUsersAggregatedByLocale");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ContentApi->GetUsersAggregatedByLocale");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ContentApi->GetUsersAggregatedByLocale");

            var localVarPath = "/api/v2/Content/{applicationId}/{contentId}/users/aggregation/locale";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersAggregatedByLocale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LocaleUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LocaleUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LocaleUsageModel>)));
        }

        /// <summary>
        /// Get user histogram 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;DatedUsageModel&gt;</returns>
        public List<DatedUsageModel> GetUsersHistogram (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<DatedUsageModel>> localVarResponse = GetUsersHistogramWithHttpInfo(applicationId, contentId, startDate, endDate, interval, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get user histogram 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;DatedUsageModel&gt;</returns>
        public ApiResponse< List<DatedUsageModel> > GetUsersHistogramWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentApi->GetUsersHistogram");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentApi->GetUsersHistogram");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ContentApi->GetUsersHistogram");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ContentApi->GetUsersHistogram");

            var localVarPath = "/api/v2/Content/{applicationId}/{contentId}/users/histogram";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersHistogram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DatedUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DatedUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DatedUsageModel>)));
        }

        /// <summary>
        /// Get user histogram 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;DatedUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<DatedUsageModel>> GetUsersHistogramAsync (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<DatedUsageModel>> localVarResponse = await GetUsersHistogramAsyncWithHttpInfo(applicationId, contentId, startDate, endDate, interval, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get user histogram 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="contentId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DatedUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DatedUsageModel>>> GetUsersHistogramAsyncWithHttpInfo (string applicationId, string contentId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ContentApi->GetUsersHistogram");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentApi->GetUsersHistogram");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ContentApi->GetUsersHistogram");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ContentApi->GetUsersHistogram");

            var localVarPath = "/api/v2/Content/{applicationId}/{contentId}/users/histogram";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersHistogram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DatedUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DatedUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DatedUsageModel>)));
        }

    }
}

/* 
 * Voicify Analytics API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Voicify.Sdk.Analytics.Client;
using Voicify.Sdk.Core.Models.Model;

namespace Voicify.Sdk.Analytics.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApplicationAnalyticsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets the content miss data for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApplicationUsageModel</returns>
        ApplicationUsageModel GetApplicationContentMisses (string applicationId, DateTime? startDate = null, DateTime? endDate = null);

        /// <summary>
        /// Gets the content miss data for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApiResponse of ApplicationUsageModel</returns>
        ApiResponse<ApplicationUsageModel> GetApplicationContentMissesWithHttpInfo (string applicationId, DateTime? startDate = null, DateTime? endDate = null);
        /// <summary>
        /// Gets the content miss histogram data for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>List&lt;DatedUsageModel&gt;</returns>
        List<DatedUsageModel> GetApplicationContentMissesHistogram (string applicationId, string interval = null, DateTime? startDate = null, DateTime? endDate = null);

        /// <summary>
        /// Gets the content miss histogram data for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApiResponse of List&lt;DatedUsageModel&gt;</returns>
        ApiResponse<List<DatedUsageModel>> GetApplicationContentMissesHistogramWithHttpInfo (string applicationId, string interval = null, DateTime? startDate = null, DateTime? endDate = null);
        /// <summary>
        /// Gets the feature miss data for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApplicationUsageModel</returns>
        ApplicationUsageModel GetApplicationFeatureMisses (string applicationId, DateTime? startDate = null, DateTime? endDate = null);

        /// <summary>
        /// Gets the feature miss data for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApiResponse of ApplicationUsageModel</returns>
        ApiResponse<ApplicationUsageModel> GetApplicationFeatureMissesWithHttpInfo (string applicationId, DateTime? startDate = null, DateTime? endDate = null);
        /// <summary>
        /// Gets the feature miss histogram data for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>List&lt;DatedUsageModel&gt;</returns>
        List<DatedUsageModel> GetApplicationFeatureMissesHistogram (string applicationId, string interval = null, DateTime? startDate = null, DateTime? endDate = null);

        /// <summary>
        /// Gets the feature miss histogram data for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApiResponse of List&lt;DatedUsageModel&gt;</returns>
        ApiResponse<List<DatedUsageModel>> GetApplicationFeatureMissesHistogramWithHttpInfo (string applicationId, string interval = null, DateTime? startDate = null, DateTime? endDate = null);
        /// <summary>
        /// Gets the request data histogram for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>List&lt;DatedUsageModel&gt;</returns>
        List<DatedUsageModel> GetApplicationHistogram (string applicationId, string interval = null, DateTime? startDate = null, DateTime? endDate = null);

        /// <summary>
        /// Gets the request data histogram for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApiResponse of List&lt;DatedUsageModel&gt;</returns>
        ApiResponse<List<DatedUsageModel>> GetApplicationHistogramWithHttpInfo (string applicationId, string interval = null, DateTime? startDate = null, DateTime? endDate = null);
        /// <summary>
        /// Gets the basic miss/failure stats for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApplicationMissStatisticsModel</returns>
        ApplicationMissStatisticsModel GetApplicationMissStats (string applicationId, DateTime? startDate = null, DateTime? endDate = null);

        /// <summary>
        /// Gets the basic miss/failure stats for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApiResponse of ApplicationMissStatisticsModel</returns>
        ApiResponse<ApplicationMissStatisticsModel> GetApplicationMissStatsWithHttpInfo (string applicationId, DateTime? startDate = null, DateTime? endDate = null);
        /// <summary>
        /// Gets the session usage data for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApplicationUsageModel</returns>
        ApplicationUsageModel GetApplicationSessions (string applicationId, DateTime? startDate = null, DateTime? endDate = null);

        /// <summary>
        /// Gets the session usage data for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApiResponse of ApplicationUsageModel</returns>
        ApiResponse<ApplicationUsageModel> GetApplicationSessionsWithHttpInfo (string applicationId, DateTime? startDate = null, DateTime? endDate = null);
        /// <summary>
        /// Gets the session data histogram for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>List&lt;DatedUsageModel&gt;</returns>
        List<DatedUsageModel> GetApplicationSessionsHistogram (string applicationId, string interval = null, DateTime? startDate = null, DateTime? endDate = null);

        /// <summary>
        /// Gets the session data histogram for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApiResponse of List&lt;DatedUsageModel&gt;</returns>
        ApiResponse<List<DatedUsageModel>> GetApplicationSessionsHistogramWithHttpInfo (string applicationId, string interval = null, DateTime? startDate = null, DateTime? endDate = null);
        /// <summary>
        /// Gets the top hit content for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>TopContentHitModel</returns>
        TopContentHitModel GetApplicationTopHits (string applicationId, DateTime? startDate = null, DateTime? endDate = null);

        /// <summary>
        /// Gets the top hit content for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApiResponse of TopContentHitModel</returns>
        ApiResponse<TopContentHitModel> GetApplicationTopHitsWithHttpInfo (string applicationId, DateTime? startDate = null, DateTime? endDate = null);
        /// <summary>
        /// Gets the top missed interactions for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>TopContentMissModel</returns>
        TopContentMissModel GetApplicationTopMisses (string applicationId, DateTime? startDate = null, DateTime? endDate = null);

        /// <summary>
        /// Gets the top missed interactions for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApiResponse of TopContentMissModel</returns>
        ApiResponse<TopContentMissModel> GetApplicationTopMissesWithHttpInfo (string applicationId, DateTime? startDate = null, DateTime? endDate = null);
        /// <summary>
        /// Gets the request usage data for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApplicationUsageModel</returns>
        ApplicationUsageModel GetApplicationUsage (string applicationId, DateTime? startDate = null, DateTime? endDate = null);

        /// <summary>
        /// Gets the request usage data for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApiResponse of ApplicationUsageModel</returns>
        ApiResponse<ApplicationUsageModel> GetApplicationUsageWithHttpInfo (string applicationId, DateTime? startDate = null, DateTime? endDate = null);
        /// <summary>
        /// Gets the user usage data for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApplicationUsageModel</returns>
        ApplicationUsageModel GetApplicationUsers (string applicationId, DateTime? startDate = null, DateTime? endDate = null);

        /// <summary>
        /// Gets the user usage data for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApiResponse of ApplicationUsageModel</returns>
        ApiResponse<ApplicationUsageModel> GetApplicationUsersWithHttpInfo (string applicationId, DateTime? startDate = null, DateTime? endDate = null);
        /// <summary>
        /// Gets the users data histogram for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>List&lt;DatedUsageModel&gt;</returns>
        List<DatedUsageModel> GetApplicationUsersHistogram (string applicationId, string interval = null, DateTime? startDate = null, DateTime? endDate = null);

        /// <summary>
        /// Gets the users data histogram for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApiResponse of List&lt;DatedUsageModel&gt;</returns>
        ApiResponse<List<DatedUsageModel>> GetApplicationUsersHistogramWithHttpInfo (string applicationId, string interval = null, DateTime? startDate = null, DateTime? endDate = null);
        /// <summary>
        /// Gets the basic statistics for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApplicationStatisticsModel</returns>
        ApplicationStatisticsModel GetBasicApplicationStats (string applicationId, DateTime? startDate = null, DateTime? endDate = null);

        /// <summary>
        /// Gets the basic statistics for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApiResponse of ApplicationStatisticsModel</returns>
        ApiResponse<ApplicationStatisticsModel> GetBasicApplicationStatsWithHttpInfo (string applicationId, DateTime? startDate = null, DateTime? endDate = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets the content miss data for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApplicationUsageModel</returns>
        System.Threading.Tasks.Task<ApplicationUsageModel> GetApplicationContentMissesAsync (string applicationId, DateTime? startDate = null, DateTime? endDate = null);

        /// <summary>
        /// Gets the content miss data for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApiResponse (ApplicationUsageModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationUsageModel>> GetApplicationContentMissesAsyncWithHttpInfo (string applicationId, DateTime? startDate = null, DateTime? endDate = null);
        /// <summary>
        /// Gets the content miss histogram data for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of List&lt;DatedUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<DatedUsageModel>> GetApplicationContentMissesHistogramAsync (string applicationId, string interval = null, DateTime? startDate = null, DateTime? endDate = null);

        /// <summary>
        /// Gets the content miss histogram data for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DatedUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DatedUsageModel>>> GetApplicationContentMissesHistogramAsyncWithHttpInfo (string applicationId, string interval = null, DateTime? startDate = null, DateTime? endDate = null);
        /// <summary>
        /// Gets the feature miss data for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApplicationUsageModel</returns>
        System.Threading.Tasks.Task<ApplicationUsageModel> GetApplicationFeatureMissesAsync (string applicationId, DateTime? startDate = null, DateTime? endDate = null);

        /// <summary>
        /// Gets the feature miss data for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApiResponse (ApplicationUsageModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationUsageModel>> GetApplicationFeatureMissesAsyncWithHttpInfo (string applicationId, DateTime? startDate = null, DateTime? endDate = null);
        /// <summary>
        /// Gets the feature miss histogram data for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of List&lt;DatedUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<DatedUsageModel>> GetApplicationFeatureMissesHistogramAsync (string applicationId, string interval = null, DateTime? startDate = null, DateTime? endDate = null);

        /// <summary>
        /// Gets the feature miss histogram data for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DatedUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DatedUsageModel>>> GetApplicationFeatureMissesHistogramAsyncWithHttpInfo (string applicationId, string interval = null, DateTime? startDate = null, DateTime? endDate = null);
        /// <summary>
        /// Gets the request data histogram for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of List&lt;DatedUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<DatedUsageModel>> GetApplicationHistogramAsync (string applicationId, string interval = null, DateTime? startDate = null, DateTime? endDate = null);

        /// <summary>
        /// Gets the request data histogram for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DatedUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DatedUsageModel>>> GetApplicationHistogramAsyncWithHttpInfo (string applicationId, string interval = null, DateTime? startDate = null, DateTime? endDate = null);
        /// <summary>
        /// Gets the basic miss/failure stats for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApplicationMissStatisticsModel</returns>
        System.Threading.Tasks.Task<ApplicationMissStatisticsModel> GetApplicationMissStatsAsync (string applicationId, DateTime? startDate = null, DateTime? endDate = null);

        /// <summary>
        /// Gets the basic miss/failure stats for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApiResponse (ApplicationMissStatisticsModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationMissStatisticsModel>> GetApplicationMissStatsAsyncWithHttpInfo (string applicationId, DateTime? startDate = null, DateTime? endDate = null);
        /// <summary>
        /// Gets the session usage data for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApplicationUsageModel</returns>
        System.Threading.Tasks.Task<ApplicationUsageModel> GetApplicationSessionsAsync (string applicationId, DateTime? startDate = null, DateTime? endDate = null);

        /// <summary>
        /// Gets the session usage data for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApiResponse (ApplicationUsageModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationUsageModel>> GetApplicationSessionsAsyncWithHttpInfo (string applicationId, DateTime? startDate = null, DateTime? endDate = null);
        /// <summary>
        /// Gets the session data histogram for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of List&lt;DatedUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<DatedUsageModel>> GetApplicationSessionsHistogramAsync (string applicationId, string interval = null, DateTime? startDate = null, DateTime? endDate = null);

        /// <summary>
        /// Gets the session data histogram for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DatedUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DatedUsageModel>>> GetApplicationSessionsHistogramAsyncWithHttpInfo (string applicationId, string interval = null, DateTime? startDate = null, DateTime? endDate = null);
        /// <summary>
        /// Gets the top hit content for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of TopContentHitModel</returns>
        System.Threading.Tasks.Task<TopContentHitModel> GetApplicationTopHitsAsync (string applicationId, DateTime? startDate = null, DateTime? endDate = null);

        /// <summary>
        /// Gets the top hit content for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApiResponse (TopContentHitModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TopContentHitModel>> GetApplicationTopHitsAsyncWithHttpInfo (string applicationId, DateTime? startDate = null, DateTime? endDate = null);
        /// <summary>
        /// Gets the top missed interactions for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of TopContentMissModel</returns>
        System.Threading.Tasks.Task<TopContentMissModel> GetApplicationTopMissesAsync (string applicationId, DateTime? startDate = null, DateTime? endDate = null);

        /// <summary>
        /// Gets the top missed interactions for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApiResponse (TopContentMissModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TopContentMissModel>> GetApplicationTopMissesAsyncWithHttpInfo (string applicationId, DateTime? startDate = null, DateTime? endDate = null);
        /// <summary>
        /// Gets the request usage data for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApplicationUsageModel</returns>
        System.Threading.Tasks.Task<ApplicationUsageModel> GetApplicationUsageAsync (string applicationId, DateTime? startDate = null, DateTime? endDate = null);

        /// <summary>
        /// Gets the request usage data for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApiResponse (ApplicationUsageModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationUsageModel>> GetApplicationUsageAsyncWithHttpInfo (string applicationId, DateTime? startDate = null, DateTime? endDate = null);
        /// <summary>
        /// Gets the user usage data for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApplicationUsageModel</returns>
        System.Threading.Tasks.Task<ApplicationUsageModel> GetApplicationUsersAsync (string applicationId, DateTime? startDate = null, DateTime? endDate = null);

        /// <summary>
        /// Gets the user usage data for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApiResponse (ApplicationUsageModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationUsageModel>> GetApplicationUsersAsyncWithHttpInfo (string applicationId, DateTime? startDate = null, DateTime? endDate = null);
        /// <summary>
        /// Gets the users data histogram for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of List&lt;DatedUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<DatedUsageModel>> GetApplicationUsersHistogramAsync (string applicationId, string interval = null, DateTime? startDate = null, DateTime? endDate = null);

        /// <summary>
        /// Gets the users data histogram for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DatedUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DatedUsageModel>>> GetApplicationUsersHistogramAsyncWithHttpInfo (string applicationId, string interval = null, DateTime? startDate = null, DateTime? endDate = null);
        /// <summary>
        /// Gets the basic statistics for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApplicationStatisticsModel</returns>
        System.Threading.Tasks.Task<ApplicationStatisticsModel> GetBasicApplicationStatsAsync (string applicationId, DateTime? startDate = null, DateTime? endDate = null);

        /// <summary>
        /// Gets the basic statistics for an app
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApiResponse (ApplicationStatisticsModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationStatisticsModel>> GetBasicApplicationStatsAsyncWithHttpInfo (string applicationId, DateTime? startDate = null, DateTime? endDate = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ApplicationAnalyticsApi : IApplicationAnalyticsApi
    {
        private Voicify.Sdk.Analytics.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationAnalyticsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApplicationAnalyticsApi(String basePath)
        {
            this.Configuration = new Voicify.Sdk.Analytics.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Voicify.Sdk.Analytics.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationAnalyticsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ApplicationAnalyticsApi(Voicify.Sdk.Analytics.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Voicify.Sdk.Analytics.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Voicify.Sdk.Analytics.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Voicify.Sdk.Analytics.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Voicify.Sdk.Analytics.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets the content miss data for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApplicationUsageModel</returns>
        public ApplicationUsageModel GetApplicationContentMisses (string applicationId, DateTime? startDate = null, DateTime? endDate = null)
        {
             ApiResponse<ApplicationUsageModel> localVarResponse = GetApplicationContentMissesWithHttpInfo(applicationId, startDate, endDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the content miss data for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApiResponse of ApplicationUsageModel</returns>
        public ApiResponse< ApplicationUsageModel > GetApplicationContentMissesWithHttpInfo (string applicationId, DateTime? startDate = null, DateTime? endDate = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationAnalyticsApi->GetApplicationContentMisses");

            var localVarPath = "/api/ApplicationAnalytics/contentmisses/usage/{applicationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationContentMisses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationUsageModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationUsageModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationUsageModel)));
        }

        /// <summary>
        /// Gets the content miss data for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApplicationUsageModel</returns>
        public async System.Threading.Tasks.Task<ApplicationUsageModel> GetApplicationContentMissesAsync (string applicationId, DateTime? startDate = null, DateTime? endDate = null)
        {
             ApiResponse<ApplicationUsageModel> localVarResponse = await GetApplicationContentMissesAsyncWithHttpInfo(applicationId, startDate, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the content miss data for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApiResponse (ApplicationUsageModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApplicationUsageModel>> GetApplicationContentMissesAsyncWithHttpInfo (string applicationId, DateTime? startDate = null, DateTime? endDate = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationAnalyticsApi->GetApplicationContentMisses");

            var localVarPath = "/api/ApplicationAnalytics/contentmisses/usage/{applicationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationContentMisses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationUsageModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationUsageModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationUsageModel)));
        }

        /// <summary>
        /// Gets the content miss histogram data for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>List&lt;DatedUsageModel&gt;</returns>
        public List<DatedUsageModel> GetApplicationContentMissesHistogram (string applicationId, string interval = null, DateTime? startDate = null, DateTime? endDate = null)
        {
             ApiResponse<List<DatedUsageModel>> localVarResponse = GetApplicationContentMissesHistogramWithHttpInfo(applicationId, interval, startDate, endDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the content miss histogram data for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApiResponse of List&lt;DatedUsageModel&gt;</returns>
        public ApiResponse< List<DatedUsageModel> > GetApplicationContentMissesHistogramWithHttpInfo (string applicationId, string interval = null, DateTime? startDate = null, DateTime? endDate = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationAnalyticsApi->GetApplicationContentMissesHistogram");

            var localVarPath = "/api/ApplicationAnalytics/contentmisses/histogram/{applicationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationContentMissesHistogram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DatedUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DatedUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DatedUsageModel>)));
        }

        /// <summary>
        /// Gets the content miss histogram data for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of List&lt;DatedUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<DatedUsageModel>> GetApplicationContentMissesHistogramAsync (string applicationId, string interval = null, DateTime? startDate = null, DateTime? endDate = null)
        {
             ApiResponse<List<DatedUsageModel>> localVarResponse = await GetApplicationContentMissesHistogramAsyncWithHttpInfo(applicationId, interval, startDate, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the content miss histogram data for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DatedUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DatedUsageModel>>> GetApplicationContentMissesHistogramAsyncWithHttpInfo (string applicationId, string interval = null, DateTime? startDate = null, DateTime? endDate = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationAnalyticsApi->GetApplicationContentMissesHistogram");

            var localVarPath = "/api/ApplicationAnalytics/contentmisses/histogram/{applicationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationContentMissesHistogram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DatedUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DatedUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DatedUsageModel>)));
        }

        /// <summary>
        /// Gets the feature miss data for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApplicationUsageModel</returns>
        public ApplicationUsageModel GetApplicationFeatureMisses (string applicationId, DateTime? startDate = null, DateTime? endDate = null)
        {
             ApiResponse<ApplicationUsageModel> localVarResponse = GetApplicationFeatureMissesWithHttpInfo(applicationId, startDate, endDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the feature miss data for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApiResponse of ApplicationUsageModel</returns>
        public ApiResponse< ApplicationUsageModel > GetApplicationFeatureMissesWithHttpInfo (string applicationId, DateTime? startDate = null, DateTime? endDate = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationAnalyticsApi->GetApplicationFeatureMisses");

            var localVarPath = "/api/ApplicationAnalytics/featuremisses/usage/{applicationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationFeatureMisses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationUsageModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationUsageModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationUsageModel)));
        }

        /// <summary>
        /// Gets the feature miss data for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApplicationUsageModel</returns>
        public async System.Threading.Tasks.Task<ApplicationUsageModel> GetApplicationFeatureMissesAsync (string applicationId, DateTime? startDate = null, DateTime? endDate = null)
        {
             ApiResponse<ApplicationUsageModel> localVarResponse = await GetApplicationFeatureMissesAsyncWithHttpInfo(applicationId, startDate, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the feature miss data for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApiResponse (ApplicationUsageModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApplicationUsageModel>> GetApplicationFeatureMissesAsyncWithHttpInfo (string applicationId, DateTime? startDate = null, DateTime? endDate = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationAnalyticsApi->GetApplicationFeatureMisses");

            var localVarPath = "/api/ApplicationAnalytics/featuremisses/usage/{applicationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationFeatureMisses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationUsageModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationUsageModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationUsageModel)));
        }

        /// <summary>
        /// Gets the feature miss histogram data for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>List&lt;DatedUsageModel&gt;</returns>
        public List<DatedUsageModel> GetApplicationFeatureMissesHistogram (string applicationId, string interval = null, DateTime? startDate = null, DateTime? endDate = null)
        {
             ApiResponse<List<DatedUsageModel>> localVarResponse = GetApplicationFeatureMissesHistogramWithHttpInfo(applicationId, interval, startDate, endDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the feature miss histogram data for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApiResponse of List&lt;DatedUsageModel&gt;</returns>
        public ApiResponse< List<DatedUsageModel> > GetApplicationFeatureMissesHistogramWithHttpInfo (string applicationId, string interval = null, DateTime? startDate = null, DateTime? endDate = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationAnalyticsApi->GetApplicationFeatureMissesHistogram");

            var localVarPath = "/api/ApplicationAnalytics/featuremisses/histogram/{applicationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationFeatureMissesHistogram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DatedUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DatedUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DatedUsageModel>)));
        }

        /// <summary>
        /// Gets the feature miss histogram data for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of List&lt;DatedUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<DatedUsageModel>> GetApplicationFeatureMissesHistogramAsync (string applicationId, string interval = null, DateTime? startDate = null, DateTime? endDate = null)
        {
             ApiResponse<List<DatedUsageModel>> localVarResponse = await GetApplicationFeatureMissesHistogramAsyncWithHttpInfo(applicationId, interval, startDate, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the feature miss histogram data for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DatedUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DatedUsageModel>>> GetApplicationFeatureMissesHistogramAsyncWithHttpInfo (string applicationId, string interval = null, DateTime? startDate = null, DateTime? endDate = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationAnalyticsApi->GetApplicationFeatureMissesHistogram");

            var localVarPath = "/api/ApplicationAnalytics/featuremisses/histogram/{applicationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationFeatureMissesHistogram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DatedUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DatedUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DatedUsageModel>)));
        }

        /// <summary>
        /// Gets the request data histogram for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>List&lt;DatedUsageModel&gt;</returns>
        public List<DatedUsageModel> GetApplicationHistogram (string applicationId, string interval = null, DateTime? startDate = null, DateTime? endDate = null)
        {
             ApiResponse<List<DatedUsageModel>> localVarResponse = GetApplicationHistogramWithHttpInfo(applicationId, interval, startDate, endDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the request data histogram for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApiResponse of List&lt;DatedUsageModel&gt;</returns>
        public ApiResponse< List<DatedUsageModel> > GetApplicationHistogramWithHttpInfo (string applicationId, string interval = null, DateTime? startDate = null, DateTime? endDate = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationAnalyticsApi->GetApplicationHistogram");

            var localVarPath = "/api/ApplicationAnalytics/requests/histogram/{applicationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationHistogram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DatedUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DatedUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DatedUsageModel>)));
        }

        /// <summary>
        /// Gets the request data histogram for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of List&lt;DatedUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<DatedUsageModel>> GetApplicationHistogramAsync (string applicationId, string interval = null, DateTime? startDate = null, DateTime? endDate = null)
        {
             ApiResponse<List<DatedUsageModel>> localVarResponse = await GetApplicationHistogramAsyncWithHttpInfo(applicationId, interval, startDate, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the request data histogram for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DatedUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DatedUsageModel>>> GetApplicationHistogramAsyncWithHttpInfo (string applicationId, string interval = null, DateTime? startDate = null, DateTime? endDate = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationAnalyticsApi->GetApplicationHistogram");

            var localVarPath = "/api/ApplicationAnalytics/requests/histogram/{applicationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationHistogram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DatedUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DatedUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DatedUsageModel>)));
        }

        /// <summary>
        /// Gets the basic miss/failure stats for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApplicationMissStatisticsModel</returns>
        public ApplicationMissStatisticsModel GetApplicationMissStats (string applicationId, DateTime? startDate = null, DateTime? endDate = null)
        {
             ApiResponse<ApplicationMissStatisticsModel> localVarResponse = GetApplicationMissStatsWithHttpInfo(applicationId, startDate, endDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the basic miss/failure stats for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApiResponse of ApplicationMissStatisticsModel</returns>
        public ApiResponse< ApplicationMissStatisticsModel > GetApplicationMissStatsWithHttpInfo (string applicationId, DateTime? startDate = null, DateTime? endDate = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationAnalyticsApi->GetApplicationMissStats");

            var localVarPath = "/api/ApplicationAnalytics/missstats/{applicationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationMissStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationMissStatisticsModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationMissStatisticsModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationMissStatisticsModel)));
        }

        /// <summary>
        /// Gets the basic miss/failure stats for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApplicationMissStatisticsModel</returns>
        public async System.Threading.Tasks.Task<ApplicationMissStatisticsModel> GetApplicationMissStatsAsync (string applicationId, DateTime? startDate = null, DateTime? endDate = null)
        {
             ApiResponse<ApplicationMissStatisticsModel> localVarResponse = await GetApplicationMissStatsAsyncWithHttpInfo(applicationId, startDate, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the basic miss/failure stats for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApiResponse (ApplicationMissStatisticsModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApplicationMissStatisticsModel>> GetApplicationMissStatsAsyncWithHttpInfo (string applicationId, DateTime? startDate = null, DateTime? endDate = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationAnalyticsApi->GetApplicationMissStats");

            var localVarPath = "/api/ApplicationAnalytics/missstats/{applicationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationMissStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationMissStatisticsModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationMissStatisticsModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationMissStatisticsModel)));
        }

        /// <summary>
        /// Gets the session usage data for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApplicationUsageModel</returns>
        public ApplicationUsageModel GetApplicationSessions (string applicationId, DateTime? startDate = null, DateTime? endDate = null)
        {
             ApiResponse<ApplicationUsageModel> localVarResponse = GetApplicationSessionsWithHttpInfo(applicationId, startDate, endDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the session usage data for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApiResponse of ApplicationUsageModel</returns>
        public ApiResponse< ApplicationUsageModel > GetApplicationSessionsWithHttpInfo (string applicationId, DateTime? startDate = null, DateTime? endDate = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationAnalyticsApi->GetApplicationSessions");

            var localVarPath = "/api/ApplicationAnalytics/sessions/usage/{applicationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationSessions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationUsageModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationUsageModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationUsageModel)));
        }

        /// <summary>
        /// Gets the session usage data for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApplicationUsageModel</returns>
        public async System.Threading.Tasks.Task<ApplicationUsageModel> GetApplicationSessionsAsync (string applicationId, DateTime? startDate = null, DateTime? endDate = null)
        {
             ApiResponse<ApplicationUsageModel> localVarResponse = await GetApplicationSessionsAsyncWithHttpInfo(applicationId, startDate, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the session usage data for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApiResponse (ApplicationUsageModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApplicationUsageModel>> GetApplicationSessionsAsyncWithHttpInfo (string applicationId, DateTime? startDate = null, DateTime? endDate = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationAnalyticsApi->GetApplicationSessions");

            var localVarPath = "/api/ApplicationAnalytics/sessions/usage/{applicationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationSessions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationUsageModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationUsageModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationUsageModel)));
        }

        /// <summary>
        /// Gets the session data histogram for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>List&lt;DatedUsageModel&gt;</returns>
        public List<DatedUsageModel> GetApplicationSessionsHistogram (string applicationId, string interval = null, DateTime? startDate = null, DateTime? endDate = null)
        {
             ApiResponse<List<DatedUsageModel>> localVarResponse = GetApplicationSessionsHistogramWithHttpInfo(applicationId, interval, startDate, endDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the session data histogram for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApiResponse of List&lt;DatedUsageModel&gt;</returns>
        public ApiResponse< List<DatedUsageModel> > GetApplicationSessionsHistogramWithHttpInfo (string applicationId, string interval = null, DateTime? startDate = null, DateTime? endDate = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationAnalyticsApi->GetApplicationSessionsHistogram");

            var localVarPath = "/api/ApplicationAnalytics/sessions/histogram/{applicationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationSessionsHistogram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DatedUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DatedUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DatedUsageModel>)));
        }

        /// <summary>
        /// Gets the session data histogram for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of List&lt;DatedUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<DatedUsageModel>> GetApplicationSessionsHistogramAsync (string applicationId, string interval = null, DateTime? startDate = null, DateTime? endDate = null)
        {
             ApiResponse<List<DatedUsageModel>> localVarResponse = await GetApplicationSessionsHistogramAsyncWithHttpInfo(applicationId, interval, startDate, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the session data histogram for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DatedUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DatedUsageModel>>> GetApplicationSessionsHistogramAsyncWithHttpInfo (string applicationId, string interval = null, DateTime? startDate = null, DateTime? endDate = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationAnalyticsApi->GetApplicationSessionsHistogram");

            var localVarPath = "/api/ApplicationAnalytics/sessions/histogram/{applicationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationSessionsHistogram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DatedUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DatedUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DatedUsageModel>)));
        }

        /// <summary>
        /// Gets the top hit content for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>TopContentHitModel</returns>
        public TopContentHitModel GetApplicationTopHits (string applicationId, DateTime? startDate = null, DateTime? endDate = null)
        {
             ApiResponse<TopContentHitModel> localVarResponse = GetApplicationTopHitsWithHttpInfo(applicationId, startDate, endDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the top hit content for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApiResponse of TopContentHitModel</returns>
        public ApiResponse< TopContentHitModel > GetApplicationTopHitsWithHttpInfo (string applicationId, DateTime? startDate = null, DateTime? endDate = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationAnalyticsApi->GetApplicationTopHits");

            var localVarPath = "/api/ApplicationAnalytics/tophits/{applicationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationTopHits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TopContentHitModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TopContentHitModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TopContentHitModel)));
        }

        /// <summary>
        /// Gets the top hit content for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of TopContentHitModel</returns>
        public async System.Threading.Tasks.Task<TopContentHitModel> GetApplicationTopHitsAsync (string applicationId, DateTime? startDate = null, DateTime? endDate = null)
        {
             ApiResponse<TopContentHitModel> localVarResponse = await GetApplicationTopHitsAsyncWithHttpInfo(applicationId, startDate, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the top hit content for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApiResponse (TopContentHitModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TopContentHitModel>> GetApplicationTopHitsAsyncWithHttpInfo (string applicationId, DateTime? startDate = null, DateTime? endDate = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationAnalyticsApi->GetApplicationTopHits");

            var localVarPath = "/api/ApplicationAnalytics/tophits/{applicationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationTopHits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TopContentHitModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TopContentHitModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TopContentHitModel)));
        }

        /// <summary>
        /// Gets the top missed interactions for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>TopContentMissModel</returns>
        public TopContentMissModel GetApplicationTopMisses (string applicationId, DateTime? startDate = null, DateTime? endDate = null)
        {
             ApiResponse<TopContentMissModel> localVarResponse = GetApplicationTopMissesWithHttpInfo(applicationId, startDate, endDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the top missed interactions for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApiResponse of TopContentMissModel</returns>
        public ApiResponse< TopContentMissModel > GetApplicationTopMissesWithHttpInfo (string applicationId, DateTime? startDate = null, DateTime? endDate = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationAnalyticsApi->GetApplicationTopMisses");

            var localVarPath = "/api/ApplicationAnalytics/topmisses/{applicationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationTopMisses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TopContentMissModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TopContentMissModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TopContentMissModel)));
        }

        /// <summary>
        /// Gets the top missed interactions for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of TopContentMissModel</returns>
        public async System.Threading.Tasks.Task<TopContentMissModel> GetApplicationTopMissesAsync (string applicationId, DateTime? startDate = null, DateTime? endDate = null)
        {
             ApiResponse<TopContentMissModel> localVarResponse = await GetApplicationTopMissesAsyncWithHttpInfo(applicationId, startDate, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the top missed interactions for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApiResponse (TopContentMissModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TopContentMissModel>> GetApplicationTopMissesAsyncWithHttpInfo (string applicationId, DateTime? startDate = null, DateTime? endDate = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationAnalyticsApi->GetApplicationTopMisses");

            var localVarPath = "/api/ApplicationAnalytics/topmisses/{applicationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationTopMisses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TopContentMissModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TopContentMissModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TopContentMissModel)));
        }

        /// <summary>
        /// Gets the request usage data for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApplicationUsageModel</returns>
        public ApplicationUsageModel GetApplicationUsage (string applicationId, DateTime? startDate = null, DateTime? endDate = null)
        {
             ApiResponse<ApplicationUsageModel> localVarResponse = GetApplicationUsageWithHttpInfo(applicationId, startDate, endDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the request usage data for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApiResponse of ApplicationUsageModel</returns>
        public ApiResponse< ApplicationUsageModel > GetApplicationUsageWithHttpInfo (string applicationId, DateTime? startDate = null, DateTime? endDate = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationAnalyticsApi->GetApplicationUsage");

            var localVarPath = "/api/ApplicationAnalytics/requests/usage/{applicationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationUsage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationUsageModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationUsageModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationUsageModel)));
        }

        /// <summary>
        /// Gets the request usage data for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApplicationUsageModel</returns>
        public async System.Threading.Tasks.Task<ApplicationUsageModel> GetApplicationUsageAsync (string applicationId, DateTime? startDate = null, DateTime? endDate = null)
        {
             ApiResponse<ApplicationUsageModel> localVarResponse = await GetApplicationUsageAsyncWithHttpInfo(applicationId, startDate, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the request usage data for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApiResponse (ApplicationUsageModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApplicationUsageModel>> GetApplicationUsageAsyncWithHttpInfo (string applicationId, DateTime? startDate = null, DateTime? endDate = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationAnalyticsApi->GetApplicationUsage");

            var localVarPath = "/api/ApplicationAnalytics/requests/usage/{applicationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationUsage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationUsageModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationUsageModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationUsageModel)));
        }

        /// <summary>
        /// Gets the user usage data for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApplicationUsageModel</returns>
        public ApplicationUsageModel GetApplicationUsers (string applicationId, DateTime? startDate = null, DateTime? endDate = null)
        {
             ApiResponse<ApplicationUsageModel> localVarResponse = GetApplicationUsersWithHttpInfo(applicationId, startDate, endDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the user usage data for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApiResponse of ApplicationUsageModel</returns>
        public ApiResponse< ApplicationUsageModel > GetApplicationUsersWithHttpInfo (string applicationId, DateTime? startDate = null, DateTime? endDate = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationAnalyticsApi->GetApplicationUsers");

            var localVarPath = "/api/ApplicationAnalytics/users/usage/{applicationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationUsageModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationUsageModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationUsageModel)));
        }

        /// <summary>
        /// Gets the user usage data for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApplicationUsageModel</returns>
        public async System.Threading.Tasks.Task<ApplicationUsageModel> GetApplicationUsersAsync (string applicationId, DateTime? startDate = null, DateTime? endDate = null)
        {
             ApiResponse<ApplicationUsageModel> localVarResponse = await GetApplicationUsersAsyncWithHttpInfo(applicationId, startDate, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the user usage data for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApiResponse (ApplicationUsageModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApplicationUsageModel>> GetApplicationUsersAsyncWithHttpInfo (string applicationId, DateTime? startDate = null, DateTime? endDate = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationAnalyticsApi->GetApplicationUsers");

            var localVarPath = "/api/ApplicationAnalytics/users/usage/{applicationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationUsageModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationUsageModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationUsageModel)));
        }

        /// <summary>
        /// Gets the users data histogram for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>List&lt;DatedUsageModel&gt;</returns>
        public List<DatedUsageModel> GetApplicationUsersHistogram (string applicationId, string interval = null, DateTime? startDate = null, DateTime? endDate = null)
        {
             ApiResponse<List<DatedUsageModel>> localVarResponse = GetApplicationUsersHistogramWithHttpInfo(applicationId, interval, startDate, endDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the users data histogram for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApiResponse of List&lt;DatedUsageModel&gt;</returns>
        public ApiResponse< List<DatedUsageModel> > GetApplicationUsersHistogramWithHttpInfo (string applicationId, string interval = null, DateTime? startDate = null, DateTime? endDate = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationAnalyticsApi->GetApplicationUsersHistogram");

            var localVarPath = "/api/ApplicationAnalytics/users/histogram/{applicationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationUsersHistogram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DatedUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DatedUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DatedUsageModel>)));
        }

        /// <summary>
        /// Gets the users data histogram for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of List&lt;DatedUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<DatedUsageModel>> GetApplicationUsersHistogramAsync (string applicationId, string interval = null, DateTime? startDate = null, DateTime? endDate = null)
        {
             ApiResponse<List<DatedUsageModel>> localVarResponse = await GetApplicationUsersHistogramAsyncWithHttpInfo(applicationId, interval, startDate, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the users data histogram for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="interval"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DatedUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DatedUsageModel>>> GetApplicationUsersHistogramAsyncWithHttpInfo (string applicationId, string interval = null, DateTime? startDate = null, DateTime? endDate = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationAnalyticsApi->GetApplicationUsersHistogram");

            var localVarPath = "/api/ApplicationAnalytics/users/histogram/{applicationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationUsersHistogram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DatedUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DatedUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DatedUsageModel>)));
        }

        /// <summary>
        /// Gets the basic statistics for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApplicationStatisticsModel</returns>
        public ApplicationStatisticsModel GetBasicApplicationStats (string applicationId, DateTime? startDate = null, DateTime? endDate = null)
        {
             ApiResponse<ApplicationStatisticsModel> localVarResponse = GetBasicApplicationStatsWithHttpInfo(applicationId, startDate, endDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the basic statistics for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApiResponse of ApplicationStatisticsModel</returns>
        public ApiResponse< ApplicationStatisticsModel > GetBasicApplicationStatsWithHttpInfo (string applicationId, DateTime? startDate = null, DateTime? endDate = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationAnalyticsApi->GetBasicApplicationStats");

            var localVarPath = "/api/ApplicationAnalytics/stats/{applicationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBasicApplicationStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationStatisticsModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationStatisticsModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationStatisticsModel)));
        }

        /// <summary>
        /// Gets the basic statistics for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApplicationStatisticsModel</returns>
        public async System.Threading.Tasks.Task<ApplicationStatisticsModel> GetBasicApplicationStatsAsync (string applicationId, DateTime? startDate = null, DateTime? endDate = null)
        {
             ApiResponse<ApplicationStatisticsModel> localVarResponse = await GetBasicApplicationStatsAsyncWithHttpInfo(applicationId, startDate, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the basic statistics for an app 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApiResponse (ApplicationStatisticsModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApplicationStatisticsModel>> GetBasicApplicationStatsAsyncWithHttpInfo (string applicationId, DateTime? startDate = null, DateTime? endDate = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationAnalyticsApi->GetBasicApplicationStats");

            var localVarPath = "/api/ApplicationAnalytics/stats/{applicationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBasicApplicationStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationStatisticsModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationStatisticsModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationStatisticsModel)));
        }

    }
}

/* 
 * Voicify Analytics API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Voicify.Sdk.Analytics.Client;
using Voicify.Sdk.Core.Models.Model;

namespace Voicify.Sdk.Analytics.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApplicationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets the unique assistant platforms used within the given time period
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetApplicationAssistants (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Gets the unique assistant platforms used within the given time period
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetApplicationAssistantsWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Gets the total miss counts for the given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApplicationMissStatisticsModel</returns>
        ApplicationMissStatisticsModel GetApplicationMissTotals (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Gets the total miss counts for the given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of ApplicationMissStatisticsModel</returns>
        ApiResponse<ApplicationMissStatisticsModel> GetApplicationMissTotalsWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Gets the top content item hits for the given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>TopContentHitModel</returns>
        TopContentHitModel GetApplicationTopHits (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Gets the top content item hits for the given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of TopContentHitModel</returns>
        ApiResponse<TopContentHitModel> GetApplicationTopHitsWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Gets the top content item misses for the given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>TopContentMissModel</returns>
        TopContentMissModel GetApplicationTopMisses (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Gets the top content item misses for the given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of TopContentMissModel</returns>
        ApiResponse<TopContentMissModel> GetApplicationTopMissesWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Gets the total usage counts for the given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApplicationStatisticsModel</returns>
        ApplicationStatisticsModel GetApplicationUsageTotals (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Gets the total usage counts for the given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of ApplicationStatisticsModel</returns>
        ApiResponse<ApplicationStatisticsModel> GetApplicationUsageTotalsWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a count of missed requests grouped by assistant platform
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;AssistantUsageModel&gt;</returns>
        List<AssistantUsageModel> GetContentMissesAggregatedByAssistant (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a count of missed requests grouped by assistant platform
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;AssistantUsageModel&gt;</returns>
        ApiResponse<List<AssistantUsageModel>> GetContentMissesAggregatedByAssistantWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a count of missed requests grouped by device type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;DeviceTargetUsageModel&gt;</returns>
        List<DeviceTargetUsageModel> GetContentMissesAggregatedByDeviceType (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a count of missed requests grouped by device type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;DeviceTargetUsageModel&gt;</returns>
        ApiResponse<List<DeviceTargetUsageModel>> GetContentMissesAggregatedByDeviceTypeWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a count of missed requests grouped by feature type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;FeatureUsageModel&gt;</returns>
        List<FeatureUsageModel> GetContentMissesAggregatedByFeatureType (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a count of missed requests grouped by feature type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;FeatureUsageModel&gt;</returns>
        ApiResponse<List<FeatureUsageModel>> GetContentMissesAggregatedByFeatureTypeWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a count of missed requests grouped by interface type (e.g. Audio, Screen, Chat)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;InterfaceUsageModel&gt;</returns>
        List<InterfaceUsageModel> GetContentMissesAggregatedByInterfaceType (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a count of missed requests grouped by interface type (e.g. Audio, Screen, Chat)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;InterfaceUsageModel&gt;</returns>
        ApiResponse<List<InterfaceUsageModel>> GetContentMissesAggregatedByInterfaceTypeWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a count of missed requests grouped by locale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;LocaleUsageModel&gt;</returns>
        List<LocaleUsageModel> GetContentMissesAggregatedByLocale (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a count of missed requests grouped by locale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;LocaleUsageModel&gt;</returns>
        ApiResponse<List<LocaleUsageModel>> GetContentMissesAggregatedByLocaleWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a histogram of missed requests
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;DatedUsageModel&gt;</returns>
        List<DatedUsageModel> GetContentMissesHistogram (string applicationId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a histogram of missed requests
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;DatedUsageModel&gt;</returns>
        ApiResponse<List<DatedUsageModel>> GetContentMissesHistogramWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a count of missed features grouped by assistant platform
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;AssistantUsageModel&gt;</returns>
        List<AssistantUsageModel> GetFeatureMissesAggregatedByAssistant (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a count of missed features grouped by assistant platform
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;AssistantUsageModel&gt;</returns>
        ApiResponse<List<AssistantUsageModel>> GetFeatureMissesAggregatedByAssistantWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a count of missed features grouped by device type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;DeviceTargetUsageModel&gt;</returns>
        List<DeviceTargetUsageModel> GetFeatureMissesAggregatedByDeviceType (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a count of missed features grouped by device type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;DeviceTargetUsageModel&gt;</returns>
        ApiResponse<List<DeviceTargetUsageModel>> GetFeatureMissesAggregatedByDeviceTypeWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a count of missed features grouped by interface type (e.g. Audio, Screen, Chat)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;InterfaceUsageModel&gt;</returns>
        List<InterfaceUsageModel> GetFeatureMissesAggregatedByInterfaceType (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a count of missed features grouped by interface type (e.g. Audio, Screen, Chat)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;InterfaceUsageModel&gt;</returns>
        ApiResponse<List<InterfaceUsageModel>> GetFeatureMissesAggregatedByInterfaceTypeWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a count of missed features grouped by locale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;LocaleUsageModel&gt;</returns>
        List<LocaleUsageModel> GetFeatureMissesAggregatedByLocale (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a count of missed features grouped by locale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;LocaleUsageModel&gt;</returns>
        ApiResponse<List<LocaleUsageModel>> GetFeatureMissesAggregatedByLocaleWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a histogram of missed features
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;DatedUsageModel&gt;</returns>
        List<DatedUsageModel> GetFeatureMissesHistogram (string applicationId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a histogram of missed features
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;DatedUsageModel&gt;</returns>
        ApiResponse<List<DatedUsageModel>> GetFeatureMissesHistogramWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a count of interactions grouped by assistant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;AssistantUsageModel&gt;</returns>
        List<AssistantUsageModel> GetInteractionsAggregatedByAssistant (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a count of interactions grouped by assistant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;AssistantUsageModel&gt;</returns>
        ApiResponse<List<AssistantUsageModel>> GetInteractionsAggregatedByAssistantWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a count of interactions grouped by device target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;DeviceTargetUsageModel&gt;</returns>
        List<DeviceTargetUsageModel> GetInteractionsAggregatedByDeviceTarget (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a count of interactions grouped by device target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;DeviceTargetUsageModel&gt;</returns>
        ApiResponse<List<DeviceTargetUsageModel>> GetInteractionsAggregatedByDeviceTargetWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a count of interactions grouped by featureType
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;InterfaceUsageModel&gt;</returns>
        List<InterfaceUsageModel> GetInteractionsAggregatedByFeatureType (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a count of interactions grouped by featureType
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;InterfaceUsageModel&gt;</returns>
        ApiResponse<List<InterfaceUsageModel>> GetInteractionsAggregatedByFeatureTypeWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a count of interactions grouped by interface type (e.g. screen, audio, chat)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;InterfaceUsageModel&gt;</returns>
        List<InterfaceUsageModel> GetInteractionsAggregatedByInterfaceType (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a count of interactions grouped by interface type (e.g. screen, audio, chat)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;InterfaceUsageModel&gt;</returns>
        ApiResponse<List<InterfaceUsageModel>> GetInteractionsAggregatedByInterfaceTypeWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a count of interactions grouped by locale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;LocaleUsageModel&gt;</returns>
        List<LocaleUsageModel> GetInteractionsAggregatedByLocale (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a count of interactions grouped by locale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;LocaleUsageModel&gt;</returns>
        ApiResponse<List<LocaleUsageModel>> GetInteractionsAggregatedByLocaleWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a histogram of interactions (raw requests)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;DatedUsageModel&gt;</returns>
        List<DatedUsageModel> GetInteractionsHistogram (string applicationId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a histogram of interactions (raw requests)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;DatedUsageModel&gt;</returns>
        ApiResponse<List<DatedUsageModel>> GetInteractionsHistogramWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get new user count for application grouped by assistant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;AssistantUsageModel&gt;</returns>
        List<AssistantUsageModel> GetNewUsersAggregatedByAssistant (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get new user count for application grouped by assistant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;AssistantUsageModel&gt;</returns>
        ApiResponse<List<AssistantUsageModel>> GetNewUsersAggregatedByAssistantWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get new user count for application grouped by device target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;DeviceTargetUsageModel&gt;</returns>
        List<DeviceTargetUsageModel> GetNewUsersAggregatedByDeviceTarget (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get new user count for application grouped by device target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;DeviceTargetUsageModel&gt;</returns>
        ApiResponse<List<DeviceTargetUsageModel>> GetNewUsersAggregatedByDeviceTargetWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get new user count for application grouped by feature type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;FeatureUsageModel&gt;</returns>
        List<FeatureUsageModel> GetNewUsersAggregatedByFeatureType (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get new user count for application grouped by feature type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;FeatureUsageModel&gt;</returns>
        ApiResponse<List<FeatureUsageModel>> GetNewUsersAggregatedByFeatureTypeWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get new user count for application grouped by interface (e.g. screen, audio, chat)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;InterfaceUsageModel&gt;</returns>
        List<InterfaceUsageModel> GetNewUsersAggregatedByInterface (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get new user count for application grouped by interface (e.g. screen, audio, chat)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;InterfaceUsageModel&gt;</returns>
        ApiResponse<List<InterfaceUsageModel>> GetNewUsersAggregatedByInterfaceWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get new user count for application grouped by locale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;LocaleUsageModel&gt;</returns>
        List<LocaleUsageModel> GetNewUsersAggregatedByLocale (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get new user count for application grouped by locale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;LocaleUsageModel&gt;</returns>
        ApiResponse<List<LocaleUsageModel>> GetNewUsersAggregatedByLocaleWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get histogram of new users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;DatedUsageModel&gt;</returns>
        List<DatedUsageModel> GetNewUsersHistogram (string applicationId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get histogram of new users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;DatedUsageModel&gt;</returns>
        ApiResponse<List<DatedUsageModel>> GetNewUsersHistogramWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a count of sessions grouped by assistant platform
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;AssistantUsageModel&gt;</returns>
        List<AssistantUsageModel> GetSessionsAggregatedByAssistant (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a count of sessions grouped by assistant platform
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;AssistantUsageModel&gt;</returns>
        ApiResponse<List<AssistantUsageModel>> GetSessionsAggregatedByAssistantWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a count of sessions grouped by device target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;DeviceTargetUsageModel&gt;</returns>
        List<DeviceTargetUsageModel> GetSessionsAggregatedByDeviceTarget (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a count of sessions grouped by device target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;DeviceTargetUsageModel&gt;</returns>
        ApiResponse<List<DeviceTargetUsageModel>> GetSessionsAggregatedByDeviceTargetWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Gets a count of sessions grouped by feature type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;FeatureUsageModel&gt;</returns>
        List<FeatureUsageModel> GetSessionsAggregatedByFeatureType (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Gets a count of sessions grouped by feature type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;FeatureUsageModel&gt;</returns>
        ApiResponse<List<FeatureUsageModel>> GetSessionsAggregatedByFeatureTypeWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a count of sessions grouped by interface type (e.g. screen, audio, chat)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;InterfaceUsageModel&gt;</returns>
        List<InterfaceUsageModel> GetSessionsAggregatedByInterfaceType (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a count of sessions grouped by interface type (e.g. screen, audio, chat)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;InterfaceUsageModel&gt;</returns>
        ApiResponse<List<InterfaceUsageModel>> GetSessionsAggregatedByInterfaceTypeWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a count of sessions grouped by locale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;LocaleUsageModel&gt;</returns>
        List<LocaleUsageModel> GetSessionsAggregatedByLocale (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a count of sessions grouped by locale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;LocaleUsageModel&gt;</returns>
        ApiResponse<List<LocaleUsageModel>> GetSessionsAggregatedByLocaleWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a histogram of sessions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;DatedUsageModel&gt;</returns>
        List<DatedUsageModel> GetSessionsHistogram (string applicationId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a histogram of sessions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;DatedUsageModel&gt;</returns>
        ApiResponse<List<DatedUsageModel>> GetSessionsHistogramWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get application user count grouped by assistant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;AssistantUsageModel&gt;</returns>
        List<AssistantUsageModel> GetUsersAggregatedByAssistant (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get application user count grouped by assistant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;AssistantUsageModel&gt;</returns>
        ApiResponse<List<AssistantUsageModel>> GetUsersAggregatedByAssistantWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get application user count grouped by device target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;DeviceTargetUsageModel&gt;</returns>
        List<DeviceTargetUsageModel> GetUsersAggregatedByDeviceTarget (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get application user count grouped by device target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;DeviceTargetUsageModel&gt;</returns>
        ApiResponse<List<DeviceTargetUsageModel>> GetUsersAggregatedByDeviceTargetWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get application user count grouped by feature type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;FeatureUsageModel&gt;</returns>
        List<FeatureUsageModel> GetUsersAggregatedByFeatureType (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get application user count grouped by feature type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;FeatureUsageModel&gt;</returns>
        ApiResponse<List<FeatureUsageModel>> GetUsersAggregatedByFeatureTypeWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get application user count grouped by interface (e.g. screen, audio, chat)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;InterfaceUsageModel&gt;</returns>
        List<InterfaceUsageModel> GetUsersAggregatedByInterface (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get application user count grouped by interface (e.g. screen, audio, chat)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;InterfaceUsageModel&gt;</returns>
        ApiResponse<List<InterfaceUsageModel>> GetUsersAggregatedByInterfaceWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get application user count grouped by locale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;LocaleUsageModel&gt;</returns>
        List<LocaleUsageModel> GetUsersAggregatedByLocale (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get application user count grouped by locale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;LocaleUsageModel&gt;</returns>
        ApiResponse<List<LocaleUsageModel>> GetUsersAggregatedByLocaleWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get user histogram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;DatedUsageModel&gt;</returns>
        List<DatedUsageModel> GetUsersHistogram (string applicationId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get user histogram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;DatedUsageModel&gt;</returns>
        ApiResponse<List<DatedUsageModel>> GetUsersHistogramWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets the unique assistant platforms used within the given time period
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetApplicationAssistantsAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Gets the unique assistant platforms used within the given time period
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetApplicationAssistantsAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Gets the total miss counts for the given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApplicationMissStatisticsModel</returns>
        System.Threading.Tasks.Task<ApplicationMissStatisticsModel> GetApplicationMissTotalsAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Gets the total miss counts for the given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (ApplicationMissStatisticsModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationMissStatisticsModel>> GetApplicationMissTotalsAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Gets the top content item hits for the given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of TopContentHitModel</returns>
        System.Threading.Tasks.Task<TopContentHitModel> GetApplicationTopHitsAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Gets the top content item hits for the given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (TopContentHitModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TopContentHitModel>> GetApplicationTopHitsAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Gets the top content item misses for the given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of TopContentMissModel</returns>
        System.Threading.Tasks.Task<TopContentMissModel> GetApplicationTopMissesAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Gets the top content item misses for the given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (TopContentMissModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TopContentMissModel>> GetApplicationTopMissesAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Gets the total usage counts for the given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApplicationStatisticsModel</returns>
        System.Threading.Tasks.Task<ApplicationStatisticsModel> GetApplicationUsageTotalsAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Gets the total usage counts for the given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (ApplicationStatisticsModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationStatisticsModel>> GetApplicationUsageTotalsAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a count of missed requests grouped by assistant platform
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;AssistantUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<AssistantUsageModel>> GetContentMissesAggregatedByAssistantAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a count of missed requests grouped by assistant platform
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AssistantUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AssistantUsageModel>>> GetContentMissesAggregatedByAssistantAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a count of missed requests grouped by device type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;DeviceTargetUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<DeviceTargetUsageModel>> GetContentMissesAggregatedByDeviceTypeAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a count of missed requests grouped by device type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DeviceTargetUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DeviceTargetUsageModel>>> GetContentMissesAggregatedByDeviceTypeAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a count of missed requests grouped by feature type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;FeatureUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<FeatureUsageModel>> GetContentMissesAggregatedByFeatureTypeAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a count of missed requests grouped by feature type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;FeatureUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FeatureUsageModel>>> GetContentMissesAggregatedByFeatureTypeAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a count of missed requests grouped by interface type (e.g. Audio, Screen, Chat)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;InterfaceUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<InterfaceUsageModel>> GetContentMissesAggregatedByInterfaceTypeAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a count of missed requests grouped by interface type (e.g. Audio, Screen, Chat)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InterfaceUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InterfaceUsageModel>>> GetContentMissesAggregatedByInterfaceTypeAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a count of missed requests grouped by locale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;LocaleUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<LocaleUsageModel>> GetContentMissesAggregatedByLocaleAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a count of missed requests grouped by locale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LocaleUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LocaleUsageModel>>> GetContentMissesAggregatedByLocaleAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a histogram of missed requests
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;DatedUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<DatedUsageModel>> GetContentMissesHistogramAsync (string applicationId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a histogram of missed requests
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DatedUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DatedUsageModel>>> GetContentMissesHistogramAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a count of missed features grouped by assistant platform
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;AssistantUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<AssistantUsageModel>> GetFeatureMissesAggregatedByAssistantAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a count of missed features grouped by assistant platform
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AssistantUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AssistantUsageModel>>> GetFeatureMissesAggregatedByAssistantAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a count of missed features grouped by device type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;DeviceTargetUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<DeviceTargetUsageModel>> GetFeatureMissesAggregatedByDeviceTypeAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a count of missed features grouped by device type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DeviceTargetUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DeviceTargetUsageModel>>> GetFeatureMissesAggregatedByDeviceTypeAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a count of missed features grouped by interface type (e.g. Audio, Screen, Chat)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;InterfaceUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<InterfaceUsageModel>> GetFeatureMissesAggregatedByInterfaceTypeAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a count of missed features grouped by interface type (e.g. Audio, Screen, Chat)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InterfaceUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InterfaceUsageModel>>> GetFeatureMissesAggregatedByInterfaceTypeAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a count of missed features grouped by locale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;LocaleUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<LocaleUsageModel>> GetFeatureMissesAggregatedByLocaleAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a count of missed features grouped by locale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LocaleUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LocaleUsageModel>>> GetFeatureMissesAggregatedByLocaleAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a histogram of missed features
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;DatedUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<DatedUsageModel>> GetFeatureMissesHistogramAsync (string applicationId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a histogram of missed features
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DatedUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DatedUsageModel>>> GetFeatureMissesHistogramAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a count of interactions grouped by assistant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;AssistantUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<AssistantUsageModel>> GetInteractionsAggregatedByAssistantAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a count of interactions grouped by assistant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AssistantUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AssistantUsageModel>>> GetInteractionsAggregatedByAssistantAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a count of interactions grouped by device target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;DeviceTargetUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<DeviceTargetUsageModel>> GetInteractionsAggregatedByDeviceTargetAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a count of interactions grouped by device target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DeviceTargetUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DeviceTargetUsageModel>>> GetInteractionsAggregatedByDeviceTargetAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a count of interactions grouped by featureType
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;InterfaceUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<InterfaceUsageModel>> GetInteractionsAggregatedByFeatureTypeAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a count of interactions grouped by featureType
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InterfaceUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InterfaceUsageModel>>> GetInteractionsAggregatedByFeatureTypeAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a count of interactions grouped by interface type (e.g. screen, audio, chat)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;InterfaceUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<InterfaceUsageModel>> GetInteractionsAggregatedByInterfaceTypeAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a count of interactions grouped by interface type (e.g. screen, audio, chat)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InterfaceUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InterfaceUsageModel>>> GetInteractionsAggregatedByInterfaceTypeAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a count of interactions grouped by locale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;LocaleUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<LocaleUsageModel>> GetInteractionsAggregatedByLocaleAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a count of interactions grouped by locale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LocaleUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LocaleUsageModel>>> GetInteractionsAggregatedByLocaleAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a histogram of interactions (raw requests)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;DatedUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<DatedUsageModel>> GetInteractionsHistogramAsync (string applicationId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a histogram of interactions (raw requests)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DatedUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DatedUsageModel>>> GetInteractionsHistogramAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get new user count for application grouped by assistant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;AssistantUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<AssistantUsageModel>> GetNewUsersAggregatedByAssistantAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get new user count for application grouped by assistant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AssistantUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AssistantUsageModel>>> GetNewUsersAggregatedByAssistantAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get new user count for application grouped by device target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;DeviceTargetUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<DeviceTargetUsageModel>> GetNewUsersAggregatedByDeviceTargetAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get new user count for application grouped by device target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DeviceTargetUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DeviceTargetUsageModel>>> GetNewUsersAggregatedByDeviceTargetAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get new user count for application grouped by feature type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;FeatureUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<FeatureUsageModel>> GetNewUsersAggregatedByFeatureTypeAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get new user count for application grouped by feature type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;FeatureUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FeatureUsageModel>>> GetNewUsersAggregatedByFeatureTypeAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get new user count for application grouped by interface (e.g. screen, audio, chat)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;InterfaceUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<InterfaceUsageModel>> GetNewUsersAggregatedByInterfaceAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get new user count for application grouped by interface (e.g. screen, audio, chat)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InterfaceUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InterfaceUsageModel>>> GetNewUsersAggregatedByInterfaceAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get new user count for application grouped by locale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;LocaleUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<LocaleUsageModel>> GetNewUsersAggregatedByLocaleAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get new user count for application grouped by locale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LocaleUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LocaleUsageModel>>> GetNewUsersAggregatedByLocaleAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get histogram of new users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;DatedUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<DatedUsageModel>> GetNewUsersHistogramAsync (string applicationId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get histogram of new users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DatedUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DatedUsageModel>>> GetNewUsersHistogramAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a count of sessions grouped by assistant platform
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;AssistantUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<AssistantUsageModel>> GetSessionsAggregatedByAssistantAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a count of sessions grouped by assistant platform
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AssistantUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AssistantUsageModel>>> GetSessionsAggregatedByAssistantAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a count of sessions grouped by device target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;DeviceTargetUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<DeviceTargetUsageModel>> GetSessionsAggregatedByDeviceTargetAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a count of sessions grouped by device target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DeviceTargetUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DeviceTargetUsageModel>>> GetSessionsAggregatedByDeviceTargetAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Gets a count of sessions grouped by feature type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;FeatureUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<FeatureUsageModel>> GetSessionsAggregatedByFeatureTypeAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Gets a count of sessions grouped by feature type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;FeatureUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FeatureUsageModel>>> GetSessionsAggregatedByFeatureTypeAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a count of sessions grouped by interface type (e.g. screen, audio, chat)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;InterfaceUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<InterfaceUsageModel>> GetSessionsAggregatedByInterfaceTypeAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a count of sessions grouped by interface type (e.g. screen, audio, chat)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InterfaceUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InterfaceUsageModel>>> GetSessionsAggregatedByInterfaceTypeAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a count of sessions grouped by locale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;LocaleUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<LocaleUsageModel>> GetSessionsAggregatedByLocaleAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a count of sessions grouped by locale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LocaleUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LocaleUsageModel>>> GetSessionsAggregatedByLocaleAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get a histogram of sessions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;DatedUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<DatedUsageModel>> GetSessionsHistogramAsync (string applicationId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get a histogram of sessions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DatedUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DatedUsageModel>>> GetSessionsHistogramAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get application user count grouped by assistant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;AssistantUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<AssistantUsageModel>> GetUsersAggregatedByAssistantAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get application user count grouped by assistant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AssistantUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AssistantUsageModel>>> GetUsersAggregatedByAssistantAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get application user count grouped by device target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;DeviceTargetUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<DeviceTargetUsageModel>> GetUsersAggregatedByDeviceTargetAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get application user count grouped by device target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DeviceTargetUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DeviceTargetUsageModel>>> GetUsersAggregatedByDeviceTargetAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get application user count grouped by feature type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;FeatureUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<FeatureUsageModel>> GetUsersAggregatedByFeatureTypeAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get application user count grouped by feature type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;FeatureUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FeatureUsageModel>>> GetUsersAggregatedByFeatureTypeAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get application user count grouped by interface (e.g. screen, audio, chat)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;InterfaceUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<InterfaceUsageModel>> GetUsersAggregatedByInterfaceAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get application user count grouped by interface (e.g. screen, audio, chat)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InterfaceUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InterfaceUsageModel>>> GetUsersAggregatedByInterfaceAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get application user count grouped by locale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;LocaleUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<LocaleUsageModel>> GetUsersAggregatedByLocaleAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get application user count grouped by locale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LocaleUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LocaleUsageModel>>> GetUsersAggregatedByLocaleAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        /// <summary>
        /// Get user histogram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;DatedUsageModel&gt;</returns>
        System.Threading.Tasks.Task<List<DatedUsageModel>> GetUsersHistogramAsync (string applicationId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);

        /// <summary>
        /// Get user histogram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DatedUsageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DatedUsageModel>>> GetUsersHistogramAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ApplicationApi : IApplicationApi
    {
        private Voicify.Sdk.Analytics.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApplicationApi(String basePath)
        {
            this.Configuration = new Voicify.Sdk.Analytics.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Voicify.Sdk.Analytics.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ApplicationApi(Voicify.Sdk.Analytics.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Voicify.Sdk.Analytics.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Voicify.Sdk.Analytics.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Voicify.Sdk.Analytics.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Voicify.Sdk.Analytics.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets the unique assistant platforms used within the given time period 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetApplicationAssistants (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<string>> localVarResponse = GetApplicationAssistantsWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the unique assistant platforms used within the given time period 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > GetApplicationAssistantsWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetApplicationAssistants");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetApplicationAssistants");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetApplicationAssistants");

            var localVarPath = "/api/v2/Application/{applicationId}/unique/assistants";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationAssistants", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Gets the unique assistant platforms used within the given time period 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetApplicationAssistantsAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<string>> localVarResponse = await GetApplicationAssistantsAsyncWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the unique assistant platforms used within the given time period 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> GetApplicationAssistantsAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetApplicationAssistants");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetApplicationAssistants");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetApplicationAssistants");

            var localVarPath = "/api/v2/Application/{applicationId}/unique/assistants";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationAssistants", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Gets the total miss counts for the given application 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApplicationMissStatisticsModel</returns>
        public ApplicationMissStatisticsModel GetApplicationMissTotals (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<ApplicationMissStatisticsModel> localVarResponse = GetApplicationMissTotalsWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the total miss counts for the given application 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of ApplicationMissStatisticsModel</returns>
        public ApiResponse< ApplicationMissStatisticsModel > GetApplicationMissTotalsWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetApplicationMissTotals");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetApplicationMissTotals");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetApplicationMissTotals");

            var localVarPath = "/api/v2/Application/{applicationId}/totals/misses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationMissTotals", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationMissStatisticsModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationMissStatisticsModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationMissStatisticsModel)));
        }

        /// <summary>
        /// Gets the total miss counts for the given application 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApplicationMissStatisticsModel</returns>
        public async System.Threading.Tasks.Task<ApplicationMissStatisticsModel> GetApplicationMissTotalsAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<ApplicationMissStatisticsModel> localVarResponse = await GetApplicationMissTotalsAsyncWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the total miss counts for the given application 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (ApplicationMissStatisticsModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApplicationMissStatisticsModel>> GetApplicationMissTotalsAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetApplicationMissTotals");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetApplicationMissTotals");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetApplicationMissTotals");

            var localVarPath = "/api/v2/Application/{applicationId}/totals/misses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationMissTotals", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationMissStatisticsModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationMissStatisticsModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationMissStatisticsModel)));
        }

        /// <summary>
        /// Gets the top content item hits for the given application 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>TopContentHitModel</returns>
        public TopContentHitModel GetApplicationTopHits (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<TopContentHitModel> localVarResponse = GetApplicationTopHitsWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the top content item hits for the given application 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of TopContentHitModel</returns>
        public ApiResponse< TopContentHitModel > GetApplicationTopHitsWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetApplicationTopHits");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetApplicationTopHits");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetApplicationTopHits");

            var localVarPath = "/api/v2/Application/{applicationId}/totals/top/hits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationTopHits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TopContentHitModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TopContentHitModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TopContentHitModel)));
        }

        /// <summary>
        /// Gets the top content item hits for the given application 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of TopContentHitModel</returns>
        public async System.Threading.Tasks.Task<TopContentHitModel> GetApplicationTopHitsAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<TopContentHitModel> localVarResponse = await GetApplicationTopHitsAsyncWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the top content item hits for the given application 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (TopContentHitModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TopContentHitModel>> GetApplicationTopHitsAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetApplicationTopHits");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetApplicationTopHits");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetApplicationTopHits");

            var localVarPath = "/api/v2/Application/{applicationId}/totals/top/hits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationTopHits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TopContentHitModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TopContentHitModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TopContentHitModel)));
        }

        /// <summary>
        /// Gets the top content item misses for the given application 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>TopContentMissModel</returns>
        public TopContentMissModel GetApplicationTopMisses (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<TopContentMissModel> localVarResponse = GetApplicationTopMissesWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the top content item misses for the given application 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of TopContentMissModel</returns>
        public ApiResponse< TopContentMissModel > GetApplicationTopMissesWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetApplicationTopMisses");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetApplicationTopMisses");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetApplicationTopMisses");

            var localVarPath = "/api/v2/Application/{applicationId}/totals/top/misses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationTopMisses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TopContentMissModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TopContentMissModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TopContentMissModel)));
        }

        /// <summary>
        /// Gets the top content item misses for the given application 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of TopContentMissModel</returns>
        public async System.Threading.Tasks.Task<TopContentMissModel> GetApplicationTopMissesAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<TopContentMissModel> localVarResponse = await GetApplicationTopMissesAsyncWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the top content item misses for the given application 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (TopContentMissModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TopContentMissModel>> GetApplicationTopMissesAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetApplicationTopMisses");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetApplicationTopMisses");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetApplicationTopMisses");

            var localVarPath = "/api/v2/Application/{applicationId}/totals/top/misses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationTopMisses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TopContentMissModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TopContentMissModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TopContentMissModel)));
        }

        /// <summary>
        /// Gets the total usage counts for the given application 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApplicationStatisticsModel</returns>
        public ApplicationStatisticsModel GetApplicationUsageTotals (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<ApplicationStatisticsModel> localVarResponse = GetApplicationUsageTotalsWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the total usage counts for the given application 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of ApplicationStatisticsModel</returns>
        public ApiResponse< ApplicationStatisticsModel > GetApplicationUsageTotalsWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetApplicationUsageTotals");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetApplicationUsageTotals");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetApplicationUsageTotals");

            var localVarPath = "/api/v2/Application/{applicationId}/totals/usage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationUsageTotals", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationStatisticsModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationStatisticsModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationStatisticsModel)));
        }

        /// <summary>
        /// Gets the total usage counts for the given application 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApplicationStatisticsModel</returns>
        public async System.Threading.Tasks.Task<ApplicationStatisticsModel> GetApplicationUsageTotalsAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<ApplicationStatisticsModel> localVarResponse = await GetApplicationUsageTotalsAsyncWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the total usage counts for the given application 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (ApplicationStatisticsModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApplicationStatisticsModel>> GetApplicationUsageTotalsAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetApplicationUsageTotals");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetApplicationUsageTotals");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetApplicationUsageTotals");

            var localVarPath = "/api/v2/Application/{applicationId}/totals/usage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationUsageTotals", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationStatisticsModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationStatisticsModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationStatisticsModel)));
        }

        /// <summary>
        /// Get a count of missed requests grouped by assistant platform 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;AssistantUsageModel&gt;</returns>
        public List<AssistantUsageModel> GetContentMissesAggregatedByAssistant (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<AssistantUsageModel>> localVarResponse = GetContentMissesAggregatedByAssistantWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a count of missed requests grouped by assistant platform 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;AssistantUsageModel&gt;</returns>
        public ApiResponse< List<AssistantUsageModel> > GetContentMissesAggregatedByAssistantWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetContentMissesAggregatedByAssistant");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetContentMissesAggregatedByAssistant");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetContentMissesAggregatedByAssistant");

            var localVarPath = "/api/v2/Application/{applicationId}/contentMisses/aggregation/assistant";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContentMissesAggregatedByAssistant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssistantUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AssistantUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssistantUsageModel>)));
        }

        /// <summary>
        /// Get a count of missed requests grouped by assistant platform 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;AssistantUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<AssistantUsageModel>> GetContentMissesAggregatedByAssistantAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<AssistantUsageModel>> localVarResponse = await GetContentMissesAggregatedByAssistantAsyncWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a count of missed requests grouped by assistant platform 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AssistantUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AssistantUsageModel>>> GetContentMissesAggregatedByAssistantAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetContentMissesAggregatedByAssistant");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetContentMissesAggregatedByAssistant");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetContentMissesAggregatedByAssistant");

            var localVarPath = "/api/v2/Application/{applicationId}/contentMisses/aggregation/assistant";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContentMissesAggregatedByAssistant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssistantUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AssistantUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssistantUsageModel>)));
        }

        /// <summary>
        /// Get a count of missed requests grouped by device type 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;DeviceTargetUsageModel&gt;</returns>
        public List<DeviceTargetUsageModel> GetContentMissesAggregatedByDeviceType (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<DeviceTargetUsageModel>> localVarResponse = GetContentMissesAggregatedByDeviceTypeWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a count of missed requests grouped by device type 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;DeviceTargetUsageModel&gt;</returns>
        public ApiResponse< List<DeviceTargetUsageModel> > GetContentMissesAggregatedByDeviceTypeWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetContentMissesAggregatedByDeviceType");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetContentMissesAggregatedByDeviceType");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetContentMissesAggregatedByDeviceType");

            var localVarPath = "/api/v2/Application/{applicationId}/contentMisses/aggregation/deviceTarget";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContentMissesAggregatedByDeviceType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DeviceTargetUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DeviceTargetUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DeviceTargetUsageModel>)));
        }

        /// <summary>
        /// Get a count of missed requests grouped by device type 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;DeviceTargetUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<DeviceTargetUsageModel>> GetContentMissesAggregatedByDeviceTypeAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<DeviceTargetUsageModel>> localVarResponse = await GetContentMissesAggregatedByDeviceTypeAsyncWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a count of missed requests grouped by device type 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DeviceTargetUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DeviceTargetUsageModel>>> GetContentMissesAggregatedByDeviceTypeAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetContentMissesAggregatedByDeviceType");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetContentMissesAggregatedByDeviceType");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetContentMissesAggregatedByDeviceType");

            var localVarPath = "/api/v2/Application/{applicationId}/contentMisses/aggregation/deviceTarget";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContentMissesAggregatedByDeviceType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DeviceTargetUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DeviceTargetUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DeviceTargetUsageModel>)));
        }

        /// <summary>
        /// Get a count of missed requests grouped by feature type 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;FeatureUsageModel&gt;</returns>
        public List<FeatureUsageModel> GetContentMissesAggregatedByFeatureType (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<FeatureUsageModel>> localVarResponse = GetContentMissesAggregatedByFeatureTypeWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a count of missed requests grouped by feature type 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;FeatureUsageModel&gt;</returns>
        public ApiResponse< List<FeatureUsageModel> > GetContentMissesAggregatedByFeatureTypeWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetContentMissesAggregatedByFeatureType");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetContentMissesAggregatedByFeatureType");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetContentMissesAggregatedByFeatureType");

            var localVarPath = "/api/v2/Application/{applicationId}/contentMisses/aggregation/featureType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContentMissesAggregatedByFeatureType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FeatureUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FeatureUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FeatureUsageModel>)));
        }

        /// <summary>
        /// Get a count of missed requests grouped by feature type 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;FeatureUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<FeatureUsageModel>> GetContentMissesAggregatedByFeatureTypeAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<FeatureUsageModel>> localVarResponse = await GetContentMissesAggregatedByFeatureTypeAsyncWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a count of missed requests grouped by feature type 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;FeatureUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FeatureUsageModel>>> GetContentMissesAggregatedByFeatureTypeAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetContentMissesAggregatedByFeatureType");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetContentMissesAggregatedByFeatureType");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetContentMissesAggregatedByFeatureType");

            var localVarPath = "/api/v2/Application/{applicationId}/contentMisses/aggregation/featureType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContentMissesAggregatedByFeatureType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FeatureUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FeatureUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FeatureUsageModel>)));
        }

        /// <summary>
        /// Get a count of missed requests grouped by interface type (e.g. Audio, Screen, Chat) 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;InterfaceUsageModel&gt;</returns>
        public List<InterfaceUsageModel> GetContentMissesAggregatedByInterfaceType (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<InterfaceUsageModel>> localVarResponse = GetContentMissesAggregatedByInterfaceTypeWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a count of missed requests grouped by interface type (e.g. Audio, Screen, Chat) 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;InterfaceUsageModel&gt;</returns>
        public ApiResponse< List<InterfaceUsageModel> > GetContentMissesAggregatedByInterfaceTypeWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetContentMissesAggregatedByInterfaceType");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetContentMissesAggregatedByInterfaceType");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetContentMissesAggregatedByInterfaceType");

            var localVarPath = "/api/v2/Application/{applicationId}/contentMisses/aggregation/interfaceType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContentMissesAggregatedByInterfaceType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InterfaceUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InterfaceUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InterfaceUsageModel>)));
        }

        /// <summary>
        /// Get a count of missed requests grouped by interface type (e.g. Audio, Screen, Chat) 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;InterfaceUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<InterfaceUsageModel>> GetContentMissesAggregatedByInterfaceTypeAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<InterfaceUsageModel>> localVarResponse = await GetContentMissesAggregatedByInterfaceTypeAsyncWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a count of missed requests grouped by interface type (e.g. Audio, Screen, Chat) 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InterfaceUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InterfaceUsageModel>>> GetContentMissesAggregatedByInterfaceTypeAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetContentMissesAggregatedByInterfaceType");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetContentMissesAggregatedByInterfaceType");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetContentMissesAggregatedByInterfaceType");

            var localVarPath = "/api/v2/Application/{applicationId}/contentMisses/aggregation/interfaceType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContentMissesAggregatedByInterfaceType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InterfaceUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InterfaceUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InterfaceUsageModel>)));
        }

        /// <summary>
        /// Get a count of missed requests grouped by locale 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;LocaleUsageModel&gt;</returns>
        public List<LocaleUsageModel> GetContentMissesAggregatedByLocale (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<LocaleUsageModel>> localVarResponse = GetContentMissesAggregatedByLocaleWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a count of missed requests grouped by locale 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;LocaleUsageModel&gt;</returns>
        public ApiResponse< List<LocaleUsageModel> > GetContentMissesAggregatedByLocaleWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetContentMissesAggregatedByLocale");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetContentMissesAggregatedByLocale");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetContentMissesAggregatedByLocale");

            var localVarPath = "/api/v2/Application/{applicationId}/contentMisses/aggregation/locale";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContentMissesAggregatedByLocale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LocaleUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LocaleUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LocaleUsageModel>)));
        }

        /// <summary>
        /// Get a count of missed requests grouped by locale 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;LocaleUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<LocaleUsageModel>> GetContentMissesAggregatedByLocaleAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<LocaleUsageModel>> localVarResponse = await GetContentMissesAggregatedByLocaleAsyncWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a count of missed requests grouped by locale 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LocaleUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LocaleUsageModel>>> GetContentMissesAggregatedByLocaleAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetContentMissesAggregatedByLocale");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetContentMissesAggregatedByLocale");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetContentMissesAggregatedByLocale");

            var localVarPath = "/api/v2/Application/{applicationId}/contentMisses/aggregation/locale";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContentMissesAggregatedByLocale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LocaleUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LocaleUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LocaleUsageModel>)));
        }

        /// <summary>
        /// Get a histogram of missed requests 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;DatedUsageModel&gt;</returns>
        public List<DatedUsageModel> GetContentMissesHistogram (string applicationId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<DatedUsageModel>> localVarResponse = GetContentMissesHistogramWithHttpInfo(applicationId, startDate, endDate, interval, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a histogram of missed requests 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;DatedUsageModel&gt;</returns>
        public ApiResponse< List<DatedUsageModel> > GetContentMissesHistogramWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetContentMissesHistogram");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetContentMissesHistogram");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetContentMissesHistogram");

            var localVarPath = "/api/v2/Application/{applicationId}/contentMisses/histogram";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContentMissesHistogram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DatedUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DatedUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DatedUsageModel>)));
        }

        /// <summary>
        /// Get a histogram of missed requests 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;DatedUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<DatedUsageModel>> GetContentMissesHistogramAsync (string applicationId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<DatedUsageModel>> localVarResponse = await GetContentMissesHistogramAsyncWithHttpInfo(applicationId, startDate, endDate, interval, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a histogram of missed requests 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DatedUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DatedUsageModel>>> GetContentMissesHistogramAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetContentMissesHistogram");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetContentMissesHistogram");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetContentMissesHistogram");

            var localVarPath = "/api/v2/Application/{applicationId}/contentMisses/histogram";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContentMissesHistogram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DatedUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DatedUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DatedUsageModel>)));
        }

        /// <summary>
        /// Get a count of missed features grouped by assistant platform 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;AssistantUsageModel&gt;</returns>
        public List<AssistantUsageModel> GetFeatureMissesAggregatedByAssistant (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<AssistantUsageModel>> localVarResponse = GetFeatureMissesAggregatedByAssistantWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a count of missed features grouped by assistant platform 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;AssistantUsageModel&gt;</returns>
        public ApiResponse< List<AssistantUsageModel> > GetFeatureMissesAggregatedByAssistantWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetFeatureMissesAggregatedByAssistant");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetFeatureMissesAggregatedByAssistant");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetFeatureMissesAggregatedByAssistant");

            var localVarPath = "/api/v2/Application/{applicationId}/featureMisses/aggregation/assistant";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFeatureMissesAggregatedByAssistant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssistantUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AssistantUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssistantUsageModel>)));
        }

        /// <summary>
        /// Get a count of missed features grouped by assistant platform 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;AssistantUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<AssistantUsageModel>> GetFeatureMissesAggregatedByAssistantAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<AssistantUsageModel>> localVarResponse = await GetFeatureMissesAggregatedByAssistantAsyncWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a count of missed features grouped by assistant platform 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AssistantUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AssistantUsageModel>>> GetFeatureMissesAggregatedByAssistantAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetFeatureMissesAggregatedByAssistant");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetFeatureMissesAggregatedByAssistant");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetFeatureMissesAggregatedByAssistant");

            var localVarPath = "/api/v2/Application/{applicationId}/featureMisses/aggregation/assistant";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFeatureMissesAggregatedByAssistant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssistantUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AssistantUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssistantUsageModel>)));
        }

        /// <summary>
        /// Get a count of missed features grouped by device type 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;DeviceTargetUsageModel&gt;</returns>
        public List<DeviceTargetUsageModel> GetFeatureMissesAggregatedByDeviceType (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<DeviceTargetUsageModel>> localVarResponse = GetFeatureMissesAggregatedByDeviceTypeWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a count of missed features grouped by device type 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;DeviceTargetUsageModel&gt;</returns>
        public ApiResponse< List<DeviceTargetUsageModel> > GetFeatureMissesAggregatedByDeviceTypeWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetFeatureMissesAggregatedByDeviceType");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetFeatureMissesAggregatedByDeviceType");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetFeatureMissesAggregatedByDeviceType");

            var localVarPath = "/api/v2/Application/{applicationId}/featureMisses/aggregation/deviceTarget";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFeatureMissesAggregatedByDeviceType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DeviceTargetUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DeviceTargetUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DeviceTargetUsageModel>)));
        }

        /// <summary>
        /// Get a count of missed features grouped by device type 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;DeviceTargetUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<DeviceTargetUsageModel>> GetFeatureMissesAggregatedByDeviceTypeAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<DeviceTargetUsageModel>> localVarResponse = await GetFeatureMissesAggregatedByDeviceTypeAsyncWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a count of missed features grouped by device type 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DeviceTargetUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DeviceTargetUsageModel>>> GetFeatureMissesAggregatedByDeviceTypeAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetFeatureMissesAggregatedByDeviceType");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetFeatureMissesAggregatedByDeviceType");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetFeatureMissesAggregatedByDeviceType");

            var localVarPath = "/api/v2/Application/{applicationId}/featureMisses/aggregation/deviceTarget";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFeatureMissesAggregatedByDeviceType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DeviceTargetUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DeviceTargetUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DeviceTargetUsageModel>)));
        }

        /// <summary>
        /// Get a count of missed features grouped by interface type (e.g. Audio, Screen, Chat) 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;InterfaceUsageModel&gt;</returns>
        public List<InterfaceUsageModel> GetFeatureMissesAggregatedByInterfaceType (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<InterfaceUsageModel>> localVarResponse = GetFeatureMissesAggregatedByInterfaceTypeWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a count of missed features grouped by interface type (e.g. Audio, Screen, Chat) 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;InterfaceUsageModel&gt;</returns>
        public ApiResponse< List<InterfaceUsageModel> > GetFeatureMissesAggregatedByInterfaceTypeWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetFeatureMissesAggregatedByInterfaceType");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetFeatureMissesAggregatedByInterfaceType");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetFeatureMissesAggregatedByInterfaceType");

            var localVarPath = "/api/v2/Application/{applicationId}/featureMisses/aggregation/interfaceType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFeatureMissesAggregatedByInterfaceType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InterfaceUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InterfaceUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InterfaceUsageModel>)));
        }

        /// <summary>
        /// Get a count of missed features grouped by interface type (e.g. Audio, Screen, Chat) 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;InterfaceUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<InterfaceUsageModel>> GetFeatureMissesAggregatedByInterfaceTypeAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<InterfaceUsageModel>> localVarResponse = await GetFeatureMissesAggregatedByInterfaceTypeAsyncWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a count of missed features grouped by interface type (e.g. Audio, Screen, Chat) 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InterfaceUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InterfaceUsageModel>>> GetFeatureMissesAggregatedByInterfaceTypeAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetFeatureMissesAggregatedByInterfaceType");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetFeatureMissesAggregatedByInterfaceType");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetFeatureMissesAggregatedByInterfaceType");

            var localVarPath = "/api/v2/Application/{applicationId}/featureMisses/aggregation/interfaceType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFeatureMissesAggregatedByInterfaceType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InterfaceUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InterfaceUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InterfaceUsageModel>)));
        }

        /// <summary>
        /// Get a count of missed features grouped by locale 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;LocaleUsageModel&gt;</returns>
        public List<LocaleUsageModel> GetFeatureMissesAggregatedByLocale (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<LocaleUsageModel>> localVarResponse = GetFeatureMissesAggregatedByLocaleWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a count of missed features grouped by locale 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;LocaleUsageModel&gt;</returns>
        public ApiResponse< List<LocaleUsageModel> > GetFeatureMissesAggregatedByLocaleWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetFeatureMissesAggregatedByLocale");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetFeatureMissesAggregatedByLocale");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetFeatureMissesAggregatedByLocale");

            var localVarPath = "/api/v2/Application/{applicationId}/featureMisses/aggregation/locale";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFeatureMissesAggregatedByLocale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LocaleUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LocaleUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LocaleUsageModel>)));
        }

        /// <summary>
        /// Get a count of missed features grouped by locale 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;LocaleUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<LocaleUsageModel>> GetFeatureMissesAggregatedByLocaleAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<LocaleUsageModel>> localVarResponse = await GetFeatureMissesAggregatedByLocaleAsyncWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a count of missed features grouped by locale 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LocaleUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LocaleUsageModel>>> GetFeatureMissesAggregatedByLocaleAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetFeatureMissesAggregatedByLocale");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetFeatureMissesAggregatedByLocale");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetFeatureMissesAggregatedByLocale");

            var localVarPath = "/api/v2/Application/{applicationId}/featureMisses/aggregation/locale";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFeatureMissesAggregatedByLocale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LocaleUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LocaleUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LocaleUsageModel>)));
        }

        /// <summary>
        /// Get a histogram of missed features 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;DatedUsageModel&gt;</returns>
        public List<DatedUsageModel> GetFeatureMissesHistogram (string applicationId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<DatedUsageModel>> localVarResponse = GetFeatureMissesHistogramWithHttpInfo(applicationId, startDate, endDate, interval, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a histogram of missed features 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;DatedUsageModel&gt;</returns>
        public ApiResponse< List<DatedUsageModel> > GetFeatureMissesHistogramWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetFeatureMissesHistogram");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetFeatureMissesHistogram");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetFeatureMissesHistogram");

            var localVarPath = "/api/v2/Application/{applicationId}/featureMisses/histogram";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFeatureMissesHistogram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DatedUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DatedUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DatedUsageModel>)));
        }

        /// <summary>
        /// Get a histogram of missed features 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;DatedUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<DatedUsageModel>> GetFeatureMissesHistogramAsync (string applicationId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<DatedUsageModel>> localVarResponse = await GetFeatureMissesHistogramAsyncWithHttpInfo(applicationId, startDate, endDate, interval, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a histogram of missed features 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DatedUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DatedUsageModel>>> GetFeatureMissesHistogramAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetFeatureMissesHistogram");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetFeatureMissesHistogram");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetFeatureMissesHistogram");

            var localVarPath = "/api/v2/Application/{applicationId}/featureMisses/histogram";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFeatureMissesHistogram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DatedUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DatedUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DatedUsageModel>)));
        }

        /// <summary>
        /// Get a count of interactions grouped by assistant 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;AssistantUsageModel&gt;</returns>
        public List<AssistantUsageModel> GetInteractionsAggregatedByAssistant (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<AssistantUsageModel>> localVarResponse = GetInteractionsAggregatedByAssistantWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a count of interactions grouped by assistant 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;AssistantUsageModel&gt;</returns>
        public ApiResponse< List<AssistantUsageModel> > GetInteractionsAggregatedByAssistantWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetInteractionsAggregatedByAssistant");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetInteractionsAggregatedByAssistant");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetInteractionsAggregatedByAssistant");

            var localVarPath = "/api/v2/Application/{applicationId}/interactions/aggregation/assistant";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInteractionsAggregatedByAssistant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssistantUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AssistantUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssistantUsageModel>)));
        }

        /// <summary>
        /// Get a count of interactions grouped by assistant 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;AssistantUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<AssistantUsageModel>> GetInteractionsAggregatedByAssistantAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<AssistantUsageModel>> localVarResponse = await GetInteractionsAggregatedByAssistantAsyncWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a count of interactions grouped by assistant 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AssistantUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AssistantUsageModel>>> GetInteractionsAggregatedByAssistantAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetInteractionsAggregatedByAssistant");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetInteractionsAggregatedByAssistant");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetInteractionsAggregatedByAssistant");

            var localVarPath = "/api/v2/Application/{applicationId}/interactions/aggregation/assistant";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInteractionsAggregatedByAssistant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssistantUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AssistantUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssistantUsageModel>)));
        }

        /// <summary>
        /// Get a count of interactions grouped by device target 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;DeviceTargetUsageModel&gt;</returns>
        public List<DeviceTargetUsageModel> GetInteractionsAggregatedByDeviceTarget (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<DeviceTargetUsageModel>> localVarResponse = GetInteractionsAggregatedByDeviceTargetWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a count of interactions grouped by device target 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;DeviceTargetUsageModel&gt;</returns>
        public ApiResponse< List<DeviceTargetUsageModel> > GetInteractionsAggregatedByDeviceTargetWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetInteractionsAggregatedByDeviceTarget");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetInteractionsAggregatedByDeviceTarget");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetInteractionsAggregatedByDeviceTarget");

            var localVarPath = "/api/v2/Application/{applicationId}/interactions/aggregation/deviceTarget";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInteractionsAggregatedByDeviceTarget", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DeviceTargetUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DeviceTargetUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DeviceTargetUsageModel>)));
        }

        /// <summary>
        /// Get a count of interactions grouped by device target 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;DeviceTargetUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<DeviceTargetUsageModel>> GetInteractionsAggregatedByDeviceTargetAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<DeviceTargetUsageModel>> localVarResponse = await GetInteractionsAggregatedByDeviceTargetAsyncWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a count of interactions grouped by device target 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DeviceTargetUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DeviceTargetUsageModel>>> GetInteractionsAggregatedByDeviceTargetAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetInteractionsAggregatedByDeviceTarget");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetInteractionsAggregatedByDeviceTarget");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetInteractionsAggregatedByDeviceTarget");

            var localVarPath = "/api/v2/Application/{applicationId}/interactions/aggregation/deviceTarget";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInteractionsAggregatedByDeviceTarget", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DeviceTargetUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DeviceTargetUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DeviceTargetUsageModel>)));
        }

        /// <summary>
        /// Get a count of interactions grouped by featureType 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;InterfaceUsageModel&gt;</returns>
        public List<InterfaceUsageModel> GetInteractionsAggregatedByFeatureType (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<InterfaceUsageModel>> localVarResponse = GetInteractionsAggregatedByFeatureTypeWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a count of interactions grouped by featureType 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;InterfaceUsageModel&gt;</returns>
        public ApiResponse< List<InterfaceUsageModel> > GetInteractionsAggregatedByFeatureTypeWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetInteractionsAggregatedByFeatureType");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetInteractionsAggregatedByFeatureType");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetInteractionsAggregatedByFeatureType");

            var localVarPath = "/api/v2/Application/{applicationId}/interactions/aggregation/featureType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInteractionsAggregatedByFeatureType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InterfaceUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InterfaceUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InterfaceUsageModel>)));
        }

        /// <summary>
        /// Get a count of interactions grouped by featureType 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;InterfaceUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<InterfaceUsageModel>> GetInteractionsAggregatedByFeatureTypeAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<InterfaceUsageModel>> localVarResponse = await GetInteractionsAggregatedByFeatureTypeAsyncWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a count of interactions grouped by featureType 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InterfaceUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InterfaceUsageModel>>> GetInteractionsAggregatedByFeatureTypeAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetInteractionsAggregatedByFeatureType");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetInteractionsAggregatedByFeatureType");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetInteractionsAggregatedByFeatureType");

            var localVarPath = "/api/v2/Application/{applicationId}/interactions/aggregation/featureType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInteractionsAggregatedByFeatureType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InterfaceUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InterfaceUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InterfaceUsageModel>)));
        }

        /// <summary>
        /// Get a count of interactions grouped by interface type (e.g. screen, audio, chat) 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;InterfaceUsageModel&gt;</returns>
        public List<InterfaceUsageModel> GetInteractionsAggregatedByInterfaceType (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<InterfaceUsageModel>> localVarResponse = GetInteractionsAggregatedByInterfaceTypeWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a count of interactions grouped by interface type (e.g. screen, audio, chat) 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;InterfaceUsageModel&gt;</returns>
        public ApiResponse< List<InterfaceUsageModel> > GetInteractionsAggregatedByInterfaceTypeWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetInteractionsAggregatedByInterfaceType");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetInteractionsAggregatedByInterfaceType");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetInteractionsAggregatedByInterfaceType");

            var localVarPath = "/api/v2/Application/{applicationId}/interactions/aggregation/interfaceType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInteractionsAggregatedByInterfaceType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InterfaceUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InterfaceUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InterfaceUsageModel>)));
        }

        /// <summary>
        /// Get a count of interactions grouped by interface type (e.g. screen, audio, chat) 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;InterfaceUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<InterfaceUsageModel>> GetInteractionsAggregatedByInterfaceTypeAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<InterfaceUsageModel>> localVarResponse = await GetInteractionsAggregatedByInterfaceTypeAsyncWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a count of interactions grouped by interface type (e.g. screen, audio, chat) 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InterfaceUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InterfaceUsageModel>>> GetInteractionsAggregatedByInterfaceTypeAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetInteractionsAggregatedByInterfaceType");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetInteractionsAggregatedByInterfaceType");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetInteractionsAggregatedByInterfaceType");

            var localVarPath = "/api/v2/Application/{applicationId}/interactions/aggregation/interfaceType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInteractionsAggregatedByInterfaceType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InterfaceUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InterfaceUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InterfaceUsageModel>)));
        }

        /// <summary>
        /// Get a count of interactions grouped by locale 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;LocaleUsageModel&gt;</returns>
        public List<LocaleUsageModel> GetInteractionsAggregatedByLocale (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<LocaleUsageModel>> localVarResponse = GetInteractionsAggregatedByLocaleWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a count of interactions grouped by locale 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;LocaleUsageModel&gt;</returns>
        public ApiResponse< List<LocaleUsageModel> > GetInteractionsAggregatedByLocaleWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetInteractionsAggregatedByLocale");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetInteractionsAggregatedByLocale");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetInteractionsAggregatedByLocale");

            var localVarPath = "/api/v2/Application/{applicationId}/interactions/aggregation/locale";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInteractionsAggregatedByLocale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LocaleUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LocaleUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LocaleUsageModel>)));
        }

        /// <summary>
        /// Get a count of interactions grouped by locale 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;LocaleUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<LocaleUsageModel>> GetInteractionsAggregatedByLocaleAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<LocaleUsageModel>> localVarResponse = await GetInteractionsAggregatedByLocaleAsyncWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a count of interactions grouped by locale 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LocaleUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LocaleUsageModel>>> GetInteractionsAggregatedByLocaleAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetInteractionsAggregatedByLocale");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetInteractionsAggregatedByLocale");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetInteractionsAggregatedByLocale");

            var localVarPath = "/api/v2/Application/{applicationId}/interactions/aggregation/locale";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInteractionsAggregatedByLocale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LocaleUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LocaleUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LocaleUsageModel>)));
        }

        /// <summary>
        /// Get a histogram of interactions (raw requests) 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;DatedUsageModel&gt;</returns>
        public List<DatedUsageModel> GetInteractionsHistogram (string applicationId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<DatedUsageModel>> localVarResponse = GetInteractionsHistogramWithHttpInfo(applicationId, startDate, endDate, interval, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a histogram of interactions (raw requests) 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;DatedUsageModel&gt;</returns>
        public ApiResponse< List<DatedUsageModel> > GetInteractionsHistogramWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetInteractionsHistogram");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetInteractionsHistogram");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetInteractionsHistogram");

            var localVarPath = "/api/v2/Application/{applicationId}/interactions/histogram";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInteractionsHistogram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DatedUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DatedUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DatedUsageModel>)));
        }

        /// <summary>
        /// Get a histogram of interactions (raw requests) 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;DatedUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<DatedUsageModel>> GetInteractionsHistogramAsync (string applicationId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<DatedUsageModel>> localVarResponse = await GetInteractionsHistogramAsyncWithHttpInfo(applicationId, startDate, endDate, interval, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a histogram of interactions (raw requests) 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DatedUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DatedUsageModel>>> GetInteractionsHistogramAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetInteractionsHistogram");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetInteractionsHistogram");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetInteractionsHistogram");

            var localVarPath = "/api/v2/Application/{applicationId}/interactions/histogram";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInteractionsHistogram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DatedUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DatedUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DatedUsageModel>)));
        }

        /// <summary>
        /// Get new user count for application grouped by assistant 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;AssistantUsageModel&gt;</returns>
        public List<AssistantUsageModel> GetNewUsersAggregatedByAssistant (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<AssistantUsageModel>> localVarResponse = GetNewUsersAggregatedByAssistantWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get new user count for application grouped by assistant 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;AssistantUsageModel&gt;</returns>
        public ApiResponse< List<AssistantUsageModel> > GetNewUsersAggregatedByAssistantWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetNewUsersAggregatedByAssistant");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetNewUsersAggregatedByAssistant");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetNewUsersAggregatedByAssistant");

            var localVarPath = "/api/v2/Application/{applicationId}/newUsers/aggregation/assistant";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNewUsersAggregatedByAssistant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssistantUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AssistantUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssistantUsageModel>)));
        }

        /// <summary>
        /// Get new user count for application grouped by assistant 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;AssistantUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<AssistantUsageModel>> GetNewUsersAggregatedByAssistantAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<AssistantUsageModel>> localVarResponse = await GetNewUsersAggregatedByAssistantAsyncWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get new user count for application grouped by assistant 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AssistantUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AssistantUsageModel>>> GetNewUsersAggregatedByAssistantAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetNewUsersAggregatedByAssistant");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetNewUsersAggregatedByAssistant");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetNewUsersAggregatedByAssistant");

            var localVarPath = "/api/v2/Application/{applicationId}/newUsers/aggregation/assistant";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNewUsersAggregatedByAssistant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssistantUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AssistantUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssistantUsageModel>)));
        }

        /// <summary>
        /// Get new user count for application grouped by device target 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;DeviceTargetUsageModel&gt;</returns>
        public List<DeviceTargetUsageModel> GetNewUsersAggregatedByDeviceTarget (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<DeviceTargetUsageModel>> localVarResponse = GetNewUsersAggregatedByDeviceTargetWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get new user count for application grouped by device target 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;DeviceTargetUsageModel&gt;</returns>
        public ApiResponse< List<DeviceTargetUsageModel> > GetNewUsersAggregatedByDeviceTargetWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetNewUsersAggregatedByDeviceTarget");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetNewUsersAggregatedByDeviceTarget");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetNewUsersAggregatedByDeviceTarget");

            var localVarPath = "/api/v2/Application/{applicationId}/newUsers/aggregation/deviceTarget";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNewUsersAggregatedByDeviceTarget", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DeviceTargetUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DeviceTargetUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DeviceTargetUsageModel>)));
        }

        /// <summary>
        /// Get new user count for application grouped by device target 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;DeviceTargetUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<DeviceTargetUsageModel>> GetNewUsersAggregatedByDeviceTargetAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<DeviceTargetUsageModel>> localVarResponse = await GetNewUsersAggregatedByDeviceTargetAsyncWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get new user count for application grouped by device target 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DeviceTargetUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DeviceTargetUsageModel>>> GetNewUsersAggregatedByDeviceTargetAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetNewUsersAggregatedByDeviceTarget");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetNewUsersAggregatedByDeviceTarget");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetNewUsersAggregatedByDeviceTarget");

            var localVarPath = "/api/v2/Application/{applicationId}/newUsers/aggregation/deviceTarget";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNewUsersAggregatedByDeviceTarget", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DeviceTargetUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DeviceTargetUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DeviceTargetUsageModel>)));
        }

        /// <summary>
        /// Get new user count for application grouped by feature type 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;FeatureUsageModel&gt;</returns>
        public List<FeatureUsageModel> GetNewUsersAggregatedByFeatureType (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<FeatureUsageModel>> localVarResponse = GetNewUsersAggregatedByFeatureTypeWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get new user count for application grouped by feature type 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;FeatureUsageModel&gt;</returns>
        public ApiResponse< List<FeatureUsageModel> > GetNewUsersAggregatedByFeatureTypeWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetNewUsersAggregatedByFeatureType");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetNewUsersAggregatedByFeatureType");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetNewUsersAggregatedByFeatureType");

            var localVarPath = "/api/v2/Application/{applicationId}/newUsers/aggregation/featureType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNewUsersAggregatedByFeatureType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FeatureUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FeatureUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FeatureUsageModel>)));
        }

        /// <summary>
        /// Get new user count for application grouped by feature type 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;FeatureUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<FeatureUsageModel>> GetNewUsersAggregatedByFeatureTypeAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<FeatureUsageModel>> localVarResponse = await GetNewUsersAggregatedByFeatureTypeAsyncWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get new user count for application grouped by feature type 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;FeatureUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FeatureUsageModel>>> GetNewUsersAggregatedByFeatureTypeAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetNewUsersAggregatedByFeatureType");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetNewUsersAggregatedByFeatureType");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetNewUsersAggregatedByFeatureType");

            var localVarPath = "/api/v2/Application/{applicationId}/newUsers/aggregation/featureType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNewUsersAggregatedByFeatureType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FeatureUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FeatureUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FeatureUsageModel>)));
        }

        /// <summary>
        /// Get new user count for application grouped by interface (e.g. screen, audio, chat) 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;InterfaceUsageModel&gt;</returns>
        public List<InterfaceUsageModel> GetNewUsersAggregatedByInterface (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<InterfaceUsageModel>> localVarResponse = GetNewUsersAggregatedByInterfaceWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get new user count for application grouped by interface (e.g. screen, audio, chat) 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;InterfaceUsageModel&gt;</returns>
        public ApiResponse< List<InterfaceUsageModel> > GetNewUsersAggregatedByInterfaceWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetNewUsersAggregatedByInterface");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetNewUsersAggregatedByInterface");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetNewUsersAggregatedByInterface");

            var localVarPath = "/api/v2/Application/{applicationId}/newUsers/aggregation/interfaceType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNewUsersAggregatedByInterface", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InterfaceUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InterfaceUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InterfaceUsageModel>)));
        }

        /// <summary>
        /// Get new user count for application grouped by interface (e.g. screen, audio, chat) 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;InterfaceUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<InterfaceUsageModel>> GetNewUsersAggregatedByInterfaceAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<InterfaceUsageModel>> localVarResponse = await GetNewUsersAggregatedByInterfaceAsyncWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get new user count for application grouped by interface (e.g. screen, audio, chat) 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InterfaceUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InterfaceUsageModel>>> GetNewUsersAggregatedByInterfaceAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetNewUsersAggregatedByInterface");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetNewUsersAggregatedByInterface");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetNewUsersAggregatedByInterface");

            var localVarPath = "/api/v2/Application/{applicationId}/newUsers/aggregation/interfaceType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNewUsersAggregatedByInterface", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InterfaceUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InterfaceUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InterfaceUsageModel>)));
        }

        /// <summary>
        /// Get new user count for application grouped by locale 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;LocaleUsageModel&gt;</returns>
        public List<LocaleUsageModel> GetNewUsersAggregatedByLocale (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<LocaleUsageModel>> localVarResponse = GetNewUsersAggregatedByLocaleWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get new user count for application grouped by locale 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;LocaleUsageModel&gt;</returns>
        public ApiResponse< List<LocaleUsageModel> > GetNewUsersAggregatedByLocaleWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetNewUsersAggregatedByLocale");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetNewUsersAggregatedByLocale");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetNewUsersAggregatedByLocale");

            var localVarPath = "/api/v2/Application/{applicationId}/newUsers/aggregation/locale";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNewUsersAggregatedByLocale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LocaleUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LocaleUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LocaleUsageModel>)));
        }

        /// <summary>
        /// Get new user count for application grouped by locale 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;LocaleUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<LocaleUsageModel>> GetNewUsersAggregatedByLocaleAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<LocaleUsageModel>> localVarResponse = await GetNewUsersAggregatedByLocaleAsyncWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get new user count for application grouped by locale 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LocaleUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LocaleUsageModel>>> GetNewUsersAggregatedByLocaleAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetNewUsersAggregatedByLocale");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetNewUsersAggregatedByLocale");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetNewUsersAggregatedByLocale");

            var localVarPath = "/api/v2/Application/{applicationId}/newUsers/aggregation/locale";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNewUsersAggregatedByLocale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LocaleUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LocaleUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LocaleUsageModel>)));
        }

        /// <summary>
        /// Get histogram of new users 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;DatedUsageModel&gt;</returns>
        public List<DatedUsageModel> GetNewUsersHistogram (string applicationId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<DatedUsageModel>> localVarResponse = GetNewUsersHistogramWithHttpInfo(applicationId, startDate, endDate, interval, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get histogram of new users 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;DatedUsageModel&gt;</returns>
        public ApiResponse< List<DatedUsageModel> > GetNewUsersHistogramWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetNewUsersHistogram");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetNewUsersHistogram");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetNewUsersHistogram");

            var localVarPath = "/api/v2/Application/{applicationId}/newUsers/histogram";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNewUsersHistogram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DatedUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DatedUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DatedUsageModel>)));
        }

        /// <summary>
        /// Get histogram of new users 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;DatedUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<DatedUsageModel>> GetNewUsersHistogramAsync (string applicationId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<DatedUsageModel>> localVarResponse = await GetNewUsersHistogramAsyncWithHttpInfo(applicationId, startDate, endDate, interval, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get histogram of new users 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DatedUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DatedUsageModel>>> GetNewUsersHistogramAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetNewUsersHistogram");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetNewUsersHistogram");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetNewUsersHistogram");

            var localVarPath = "/api/v2/Application/{applicationId}/newUsers/histogram";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNewUsersHistogram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DatedUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DatedUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DatedUsageModel>)));
        }

        /// <summary>
        /// Get a count of sessions grouped by assistant platform 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;AssistantUsageModel&gt;</returns>
        public List<AssistantUsageModel> GetSessionsAggregatedByAssistant (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<AssistantUsageModel>> localVarResponse = GetSessionsAggregatedByAssistantWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a count of sessions grouped by assistant platform 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;AssistantUsageModel&gt;</returns>
        public ApiResponse< List<AssistantUsageModel> > GetSessionsAggregatedByAssistantWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetSessionsAggregatedByAssistant");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetSessionsAggregatedByAssistant");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetSessionsAggregatedByAssistant");

            var localVarPath = "/api/v2/Application/{applicationId}/sessions/aggregation/assistant";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSessionsAggregatedByAssistant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssistantUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AssistantUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssistantUsageModel>)));
        }

        /// <summary>
        /// Get a count of sessions grouped by assistant platform 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;AssistantUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<AssistantUsageModel>> GetSessionsAggregatedByAssistantAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<AssistantUsageModel>> localVarResponse = await GetSessionsAggregatedByAssistantAsyncWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a count of sessions grouped by assistant platform 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AssistantUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AssistantUsageModel>>> GetSessionsAggregatedByAssistantAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetSessionsAggregatedByAssistant");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetSessionsAggregatedByAssistant");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetSessionsAggregatedByAssistant");

            var localVarPath = "/api/v2/Application/{applicationId}/sessions/aggregation/assistant";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSessionsAggregatedByAssistant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssistantUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AssistantUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssistantUsageModel>)));
        }

        /// <summary>
        /// Get a count of sessions grouped by device target 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;DeviceTargetUsageModel&gt;</returns>
        public List<DeviceTargetUsageModel> GetSessionsAggregatedByDeviceTarget (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<DeviceTargetUsageModel>> localVarResponse = GetSessionsAggregatedByDeviceTargetWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a count of sessions grouped by device target 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;DeviceTargetUsageModel&gt;</returns>
        public ApiResponse< List<DeviceTargetUsageModel> > GetSessionsAggregatedByDeviceTargetWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetSessionsAggregatedByDeviceTarget");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetSessionsAggregatedByDeviceTarget");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetSessionsAggregatedByDeviceTarget");

            var localVarPath = "/api/v2/Application/{applicationId}/sessions/aggregation/deviceTarget";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSessionsAggregatedByDeviceTarget", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DeviceTargetUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DeviceTargetUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DeviceTargetUsageModel>)));
        }

        /// <summary>
        /// Get a count of sessions grouped by device target 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;DeviceTargetUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<DeviceTargetUsageModel>> GetSessionsAggregatedByDeviceTargetAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<DeviceTargetUsageModel>> localVarResponse = await GetSessionsAggregatedByDeviceTargetAsyncWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a count of sessions grouped by device target 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DeviceTargetUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DeviceTargetUsageModel>>> GetSessionsAggregatedByDeviceTargetAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetSessionsAggregatedByDeviceTarget");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetSessionsAggregatedByDeviceTarget");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetSessionsAggregatedByDeviceTarget");

            var localVarPath = "/api/v2/Application/{applicationId}/sessions/aggregation/deviceTarget";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSessionsAggregatedByDeviceTarget", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DeviceTargetUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DeviceTargetUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DeviceTargetUsageModel>)));
        }

        /// <summary>
        /// Gets a count of sessions grouped by feature type 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;FeatureUsageModel&gt;</returns>
        public List<FeatureUsageModel> GetSessionsAggregatedByFeatureType (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<FeatureUsageModel>> localVarResponse = GetSessionsAggregatedByFeatureTypeWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a count of sessions grouped by feature type 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;FeatureUsageModel&gt;</returns>
        public ApiResponse< List<FeatureUsageModel> > GetSessionsAggregatedByFeatureTypeWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetSessionsAggregatedByFeatureType");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetSessionsAggregatedByFeatureType");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetSessionsAggregatedByFeatureType");

            var localVarPath = "/api/v2/Application/{applicationId}/sessions/aggregation/featureType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSessionsAggregatedByFeatureType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FeatureUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FeatureUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FeatureUsageModel>)));
        }

        /// <summary>
        /// Gets a count of sessions grouped by feature type 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;FeatureUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<FeatureUsageModel>> GetSessionsAggregatedByFeatureTypeAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<FeatureUsageModel>> localVarResponse = await GetSessionsAggregatedByFeatureTypeAsyncWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a count of sessions grouped by feature type 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;FeatureUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FeatureUsageModel>>> GetSessionsAggregatedByFeatureTypeAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetSessionsAggregatedByFeatureType");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetSessionsAggregatedByFeatureType");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetSessionsAggregatedByFeatureType");

            var localVarPath = "/api/v2/Application/{applicationId}/sessions/aggregation/featureType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSessionsAggregatedByFeatureType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FeatureUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FeatureUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FeatureUsageModel>)));
        }

        /// <summary>
        /// Get a count of sessions grouped by interface type (e.g. screen, audio, chat) 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;InterfaceUsageModel&gt;</returns>
        public List<InterfaceUsageModel> GetSessionsAggregatedByInterfaceType (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<InterfaceUsageModel>> localVarResponse = GetSessionsAggregatedByInterfaceTypeWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a count of sessions grouped by interface type (e.g. screen, audio, chat) 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;InterfaceUsageModel&gt;</returns>
        public ApiResponse< List<InterfaceUsageModel> > GetSessionsAggregatedByInterfaceTypeWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetSessionsAggregatedByInterfaceType");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetSessionsAggregatedByInterfaceType");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetSessionsAggregatedByInterfaceType");

            var localVarPath = "/api/v2/Application/{applicationId}/sessions/aggregation/interfaceType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSessionsAggregatedByInterfaceType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InterfaceUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InterfaceUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InterfaceUsageModel>)));
        }

        /// <summary>
        /// Get a count of sessions grouped by interface type (e.g. screen, audio, chat) 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;InterfaceUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<InterfaceUsageModel>> GetSessionsAggregatedByInterfaceTypeAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<InterfaceUsageModel>> localVarResponse = await GetSessionsAggregatedByInterfaceTypeAsyncWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a count of sessions grouped by interface type (e.g. screen, audio, chat) 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InterfaceUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InterfaceUsageModel>>> GetSessionsAggregatedByInterfaceTypeAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetSessionsAggregatedByInterfaceType");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetSessionsAggregatedByInterfaceType");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetSessionsAggregatedByInterfaceType");

            var localVarPath = "/api/v2/Application/{applicationId}/sessions/aggregation/interfaceType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSessionsAggregatedByInterfaceType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InterfaceUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InterfaceUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InterfaceUsageModel>)));
        }

        /// <summary>
        /// Get a count of sessions grouped by locale 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;LocaleUsageModel&gt;</returns>
        public List<LocaleUsageModel> GetSessionsAggregatedByLocale (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<LocaleUsageModel>> localVarResponse = GetSessionsAggregatedByLocaleWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a count of sessions grouped by locale 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;LocaleUsageModel&gt;</returns>
        public ApiResponse< List<LocaleUsageModel> > GetSessionsAggregatedByLocaleWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetSessionsAggregatedByLocale");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetSessionsAggregatedByLocale");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetSessionsAggregatedByLocale");

            var localVarPath = "/api/v2/Application/{applicationId}/sessions/aggregation/locale";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSessionsAggregatedByLocale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LocaleUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LocaleUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LocaleUsageModel>)));
        }

        /// <summary>
        /// Get a count of sessions grouped by locale 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;LocaleUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<LocaleUsageModel>> GetSessionsAggregatedByLocaleAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<LocaleUsageModel>> localVarResponse = await GetSessionsAggregatedByLocaleAsyncWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a count of sessions grouped by locale 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LocaleUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LocaleUsageModel>>> GetSessionsAggregatedByLocaleAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetSessionsAggregatedByLocale");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetSessionsAggregatedByLocale");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetSessionsAggregatedByLocale");

            var localVarPath = "/api/v2/Application/{applicationId}/sessions/aggregation/locale";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSessionsAggregatedByLocale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LocaleUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LocaleUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LocaleUsageModel>)));
        }

        /// <summary>
        /// Get a histogram of sessions 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;DatedUsageModel&gt;</returns>
        public List<DatedUsageModel> GetSessionsHistogram (string applicationId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<DatedUsageModel>> localVarResponse = GetSessionsHistogramWithHttpInfo(applicationId, startDate, endDate, interval, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a histogram of sessions 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;DatedUsageModel&gt;</returns>
        public ApiResponse< List<DatedUsageModel> > GetSessionsHistogramWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetSessionsHistogram");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetSessionsHistogram");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetSessionsHistogram");

            var localVarPath = "/api/v2/Application/{applicationId}/sessions/histogram";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSessionsHistogram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DatedUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DatedUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DatedUsageModel>)));
        }

        /// <summary>
        /// Get a histogram of sessions 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;DatedUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<DatedUsageModel>> GetSessionsHistogramAsync (string applicationId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<DatedUsageModel>> localVarResponse = await GetSessionsHistogramAsyncWithHttpInfo(applicationId, startDate, endDate, interval, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a histogram of sessions 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DatedUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DatedUsageModel>>> GetSessionsHistogramAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetSessionsHistogram");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetSessionsHistogram");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetSessionsHistogram");

            var localVarPath = "/api/v2/Application/{applicationId}/sessions/histogram";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSessionsHistogram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DatedUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DatedUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DatedUsageModel>)));
        }

        /// <summary>
        /// Get application user count grouped by assistant 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;AssistantUsageModel&gt;</returns>
        public List<AssistantUsageModel> GetUsersAggregatedByAssistant (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<AssistantUsageModel>> localVarResponse = GetUsersAggregatedByAssistantWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get application user count grouped by assistant 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;AssistantUsageModel&gt;</returns>
        public ApiResponse< List<AssistantUsageModel> > GetUsersAggregatedByAssistantWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetUsersAggregatedByAssistant");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetUsersAggregatedByAssistant");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetUsersAggregatedByAssistant");

            var localVarPath = "/api/v2/Application/{applicationId}/users/aggregation/assistant";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersAggregatedByAssistant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssistantUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AssistantUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssistantUsageModel>)));
        }

        /// <summary>
        /// Get application user count grouped by assistant 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;AssistantUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<AssistantUsageModel>> GetUsersAggregatedByAssistantAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<AssistantUsageModel>> localVarResponse = await GetUsersAggregatedByAssistantAsyncWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get application user count grouped by assistant 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AssistantUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AssistantUsageModel>>> GetUsersAggregatedByAssistantAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetUsersAggregatedByAssistant");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetUsersAggregatedByAssistant");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetUsersAggregatedByAssistant");

            var localVarPath = "/api/v2/Application/{applicationId}/users/aggregation/assistant";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersAggregatedByAssistant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssistantUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AssistantUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssistantUsageModel>)));
        }

        /// <summary>
        /// Get application user count grouped by device target 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;DeviceTargetUsageModel&gt;</returns>
        public List<DeviceTargetUsageModel> GetUsersAggregatedByDeviceTarget (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<DeviceTargetUsageModel>> localVarResponse = GetUsersAggregatedByDeviceTargetWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get application user count grouped by device target 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;DeviceTargetUsageModel&gt;</returns>
        public ApiResponse< List<DeviceTargetUsageModel> > GetUsersAggregatedByDeviceTargetWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetUsersAggregatedByDeviceTarget");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetUsersAggregatedByDeviceTarget");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetUsersAggregatedByDeviceTarget");

            var localVarPath = "/api/v2/Application/{applicationId}/users/aggregation/deviceTarget";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersAggregatedByDeviceTarget", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DeviceTargetUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DeviceTargetUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DeviceTargetUsageModel>)));
        }

        /// <summary>
        /// Get application user count grouped by device target 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;DeviceTargetUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<DeviceTargetUsageModel>> GetUsersAggregatedByDeviceTargetAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<DeviceTargetUsageModel>> localVarResponse = await GetUsersAggregatedByDeviceTargetAsyncWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get application user count grouped by device target 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DeviceTargetUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DeviceTargetUsageModel>>> GetUsersAggregatedByDeviceTargetAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetUsersAggregatedByDeviceTarget");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetUsersAggregatedByDeviceTarget");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetUsersAggregatedByDeviceTarget");

            var localVarPath = "/api/v2/Application/{applicationId}/users/aggregation/deviceTarget";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersAggregatedByDeviceTarget", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DeviceTargetUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DeviceTargetUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DeviceTargetUsageModel>)));
        }

        /// <summary>
        /// Get application user count grouped by feature type 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;FeatureUsageModel&gt;</returns>
        public List<FeatureUsageModel> GetUsersAggregatedByFeatureType (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<FeatureUsageModel>> localVarResponse = GetUsersAggregatedByFeatureTypeWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get application user count grouped by feature type 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;FeatureUsageModel&gt;</returns>
        public ApiResponse< List<FeatureUsageModel> > GetUsersAggregatedByFeatureTypeWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetUsersAggregatedByFeatureType");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetUsersAggregatedByFeatureType");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetUsersAggregatedByFeatureType");

            var localVarPath = "/api/v2/Application/{applicationId}/users/aggregation/featureType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersAggregatedByFeatureType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FeatureUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FeatureUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FeatureUsageModel>)));
        }

        /// <summary>
        /// Get application user count grouped by feature type 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;FeatureUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<FeatureUsageModel>> GetUsersAggregatedByFeatureTypeAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<FeatureUsageModel>> localVarResponse = await GetUsersAggregatedByFeatureTypeAsyncWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get application user count grouped by feature type 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;FeatureUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FeatureUsageModel>>> GetUsersAggregatedByFeatureTypeAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetUsersAggregatedByFeatureType");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetUsersAggregatedByFeatureType");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetUsersAggregatedByFeatureType");

            var localVarPath = "/api/v2/Application/{applicationId}/users/aggregation/featureType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersAggregatedByFeatureType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FeatureUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FeatureUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FeatureUsageModel>)));
        }

        /// <summary>
        /// Get application user count grouped by interface (e.g. screen, audio, chat) 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;InterfaceUsageModel&gt;</returns>
        public List<InterfaceUsageModel> GetUsersAggregatedByInterface (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<InterfaceUsageModel>> localVarResponse = GetUsersAggregatedByInterfaceWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get application user count grouped by interface (e.g. screen, audio, chat) 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;InterfaceUsageModel&gt;</returns>
        public ApiResponse< List<InterfaceUsageModel> > GetUsersAggregatedByInterfaceWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetUsersAggregatedByInterface");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetUsersAggregatedByInterface");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetUsersAggregatedByInterface");

            var localVarPath = "/api/v2/Application/{applicationId}/users/aggregation/interfaceType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersAggregatedByInterface", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InterfaceUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InterfaceUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InterfaceUsageModel>)));
        }

        /// <summary>
        /// Get application user count grouped by interface (e.g. screen, audio, chat) 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;InterfaceUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<InterfaceUsageModel>> GetUsersAggregatedByInterfaceAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<InterfaceUsageModel>> localVarResponse = await GetUsersAggregatedByInterfaceAsyncWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get application user count grouped by interface (e.g. screen, audio, chat) 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InterfaceUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InterfaceUsageModel>>> GetUsersAggregatedByInterfaceAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetUsersAggregatedByInterface");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetUsersAggregatedByInterface");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetUsersAggregatedByInterface");

            var localVarPath = "/api/v2/Application/{applicationId}/users/aggregation/interfaceType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersAggregatedByInterface", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InterfaceUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InterfaceUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InterfaceUsageModel>)));
        }

        /// <summary>
        /// Get application user count grouped by locale 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;LocaleUsageModel&gt;</returns>
        public List<LocaleUsageModel> GetUsersAggregatedByLocale (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<LocaleUsageModel>> localVarResponse = GetUsersAggregatedByLocaleWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get application user count grouped by locale 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;LocaleUsageModel&gt;</returns>
        public ApiResponse< List<LocaleUsageModel> > GetUsersAggregatedByLocaleWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetUsersAggregatedByLocale");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetUsersAggregatedByLocale");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetUsersAggregatedByLocale");

            var localVarPath = "/api/v2/Application/{applicationId}/users/aggregation/locale";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersAggregatedByLocale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LocaleUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LocaleUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LocaleUsageModel>)));
        }

        /// <summary>
        /// Get application user count grouped by locale 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;LocaleUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<LocaleUsageModel>> GetUsersAggregatedByLocaleAsync (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<LocaleUsageModel>> localVarResponse = await GetUsersAggregatedByLocaleAsyncWithHttpInfo(applicationId, startDate, endDate, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get application user count grouped by locale 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LocaleUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LocaleUsageModel>>> GetUsersAggregatedByLocaleAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetUsersAggregatedByLocale");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetUsersAggregatedByLocale");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetUsersAggregatedByLocale");

            var localVarPath = "/api/v2/Application/{applicationId}/users/aggregation/locale";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersAggregatedByLocale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LocaleUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LocaleUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LocaleUsageModel>)));
        }

        /// <summary>
        /// Get user histogram 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>List&lt;DatedUsageModel&gt;</returns>
        public List<DatedUsageModel> GetUsersHistogram (string applicationId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<DatedUsageModel>> localVarResponse = GetUsersHistogramWithHttpInfo(applicationId, startDate, endDate, interval, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get user histogram 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>ApiResponse of List&lt;DatedUsageModel&gt;</returns>
        public ApiResponse< List<DatedUsageModel> > GetUsersHistogramWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetUsersHistogram");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetUsersHistogram");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetUsersHistogram");

            var localVarPath = "/api/v2/Application/{applicationId}/users/histogram";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersHistogram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DatedUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DatedUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DatedUsageModel>)));
        }

        /// <summary>
        /// Get user histogram 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of List&lt;DatedUsageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<DatedUsageModel>> GetUsersHistogramAsync (string applicationId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
             ApiResponse<List<DatedUsageModel>> localVarResponse = await GetUsersHistogramAsyncWithHttpInfo(applicationId, startDate, endDate, interval, locales, deviceTargetIds, assistants, userIds, sessionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get user histogram 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="startDate">The start date of the range for the query</param>
        /// <param name="endDate">The end date of the range for the query</param>
        /// <param name="interval"> (optional)</param>
        /// <param name="locales">An optional list of locales to filter request event data (optional)</param>
        /// <param name="deviceTargetIds">An optional list of device target IDs to filter requests by (optional)</param>
        /// <param name="assistants">An optional list of platforms to filter by. Ex: Alexa, GoogleAssistant, Bixby, MyCustomPlatform, etc. (optional)</param>
        /// <param name="userIds">An optional list of user IDs to filter by. This will scope all data to the specific set of users (optional)</param>
        /// <param name="sessionIds">An optional list of user IDs to filter by. This will scope all data to the specific set of sessions (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DatedUsageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DatedUsageModel>>> GetUsersHistogramAsyncWithHttpInfo (string applicationId, DateTime? startDate, DateTime? endDate, string interval = null, List<string> locales = null, List<string> deviceTargetIds = null, List<string> assistants = null, List<string> userIds = null, List<string> sessionIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationApi->GetUsersHistogram");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ApplicationApi->GetUsersHistogram");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ApplicationApi->GetUsersHistogram");

            var localVarPath = "/api/v2/Application/{applicationId}/users/histogram";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "locales", locales)); // query parameter
            if (deviceTargetIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "deviceTargetIds", deviceTargetIds)); // query parameter
            if (assistants != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "assistants", assistants)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userIds", userIds)); // query parameter
            if (sessionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sessionIds", sessionIds)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersHistogram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DatedUsageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DatedUsageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DatedUsageModel>)));
        }

    }
}
